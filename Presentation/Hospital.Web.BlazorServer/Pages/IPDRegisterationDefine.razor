@page "/IPDRegisterationDefine/{Id:int?}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using Hospital.Web.BlazorServer.Models;
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IHttpContextAccessor accessor

@attribute [Authorize]

<PageTitle>IPD Registeration Define - HMIS System</PageTitle>

<h1>@caption</h1>

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="p-3" Elevation="10">
            <TelerikForm @ref="form" Model="@iPDRegisteration"
                         OnValidSubmit="@HandleValidSubmit"
                         OnInvalidSubmit="@HandleInvalidSubmit">
                <FormValidation>
                    <DataAnnotationsValidator></DataAnnotationsValidator>

                </FormValidation>
                <FormItems>
                    <TelerikTabStrip @bind-ActiveTabIndex="@ActiveTabIndex" Class="mb-2">
                        <TabStripTab Title="General Information">
                            <MudGrid Spacing="1">
                                <MudItem md="12">
                                    @if (addPatientAccess)
                                    {
                                        <TelerikButton Class="mr-1" ButtonType="Telerik.Blazor.ButtonType.Button" OnClick="@NewPatient">Add New Patient</TelerikButton>
                                    }
                                    @if (searchPatientAccess)
                                    {
                                        <TelerikButton Class="mr-1" ButtonType="Telerik.Blazor.ButtonType.Button" OnClick="@SearchPatient">Search Patient</TelerikButton>
                                    }
                                    @if (searchOPDAccess)
                                    {
                                        <TelerikButton ButtonType="Telerik.Blazor.ButtonType.Button" OnClick="@SearchOPDPatient">Search Patient from OPD List</TelerikButton>
                                    }
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Date" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikDatePicker @bind-Value="@iPDRegisteration.Date"
                                                                Format="dddd, dd MMMM, yyyy"
                                                                Id="ipd-date" Enabled="false">
                                            </TelerikDatePicker>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.Date)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Patient" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikMultiColumnComboBox Data="@patients"
                                                                        TextField="@nameof(PatientViewModel.Name)"
                                                                        ValueField="@nameof(PatientViewModel.Id)"
                                                                        Filterable="true"
                                                                        Value="@iPDRegisteration.PatientId"
                                                                        ValueExpression="@( () => iPDRegisteration.PatientId )"
                                                                        Id="patient"
                                                                        ListHeight="250px"
                                                                        Placeholder="Hint: You can filter by the Patient Name"
                                                                        ValueChanged="@( (int c) => PatientChanged(c) )">
                                                <MultiColumnComboBoxColumns>
                                                    <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.Name)" Title="Name" Width="200px" />
                                                    <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.NationalIdCart)" Title="National ID" Width="150px" />
                                                    <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.FatherName)" Title="Father" Width="150px" />
                                                    <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.GenderName)" Title="Gender" Width="100px" />
                                                    <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.Mobile)" Title="Mobile" Width="150px" />
                                                </MultiColumnComboBoxColumns>
                                                <FooterTemplate>
                                                    <span class="combobox-footer k-display-flex k-align-items-center k-justify-content-center">
                                                        Total: @patients.Count() records
                                                    </span>
                                                </FooterTemplate>
                                            </TelerikMultiColumnComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.Patient)" />

                            
                                </MudItem>
                                @if (iPDRegisteration.PatientId > 0)
                                {
                                    <MudItem md="12">
                                        <MudExpansionPanels>
                                            <MudExpansionPanel Text="@String.Format("{0} {1} Information ",patient.NamePrefixName, patient.Name)">
                                                <MudGrid Spacing="1" Class="m-2">
                                                    <MudItem md="4">
                                                        <MudText>Patient Id : @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,patient.Id)</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>National Card Id : @patient.NationalIdCart</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Father : @patient.FatherName</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Date of Birth : @Convert.ToDateTime(patient.DateOfBirth??DateTime.Now).ToLongDateString()</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Age : @DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now)</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Gender : @patient.GenderName</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Reffer By : @patient.RefferByName</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Occupation : @patient.Occupation</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Insurance : @patient.InsuranceName</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Insurance Number : @patient.InsuranceNumber</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Proposal Number : @patient.ProposalNumber</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Phone No : @patient.Phone</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Mobile No : @patient.Mobile</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Email Address : @patient.Email</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>City : @patient.CityName</MudText>
                                                    </MudItem>
                                                    <MudItem md="4">
                                                        <MudText>Area : @patient.AreaName</MudText>
                                                    </MudItem>
                                                    <MudItem md="8">
                                                        <MudText>Address : @patient.Address</MudText>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudExpansionPanel>
                                        </MudExpansionPanels>
                                    </MudItem>
                                }
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Reffer By" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.RefferById"
                                                             Data="@refferBies"
                                                             Placeholder="Select Reffer By"
                                                             TextField="@nameof(RefferByViewModel.Name)"
                                                             ValueField="@nameof(RefferByViewModel.Id)"
                                                             Filterable="true"
                                                             Id="refferBy">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.RefferById)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Consultant Incharge" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.ConsultantInchargeId"
                                                             Data="@staffs"
                                                             Placeholder="Select Consultant Incharge"
                                                             TextField="@nameof(StaffViewModel.Name)"
                                                             ValueField="@nameof(StaffViewModel.Id)"
                                                             Filterable="true"
                                                             Id="consultantIncharge">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.ConsultantInchargeId)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Second Consultant" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.SecondConsultantId"
                                                             Data="@staffs"
                                                             Placeholder="Select Second Consultant"
                                                             TextField="@nameof(StaffViewModel.Name)"
                                                             ValueField="@nameof(StaffViewModel.Id)"
                                                             Filterable="true"
                                                             Id="secondConsultant">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.SecondConsultantId)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Third Consultant" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.ThirdConsultantId"
                                                             Data="@staffs"
                                                             Placeholder="Select Third Consultant"
                                                             TextField="@nameof(StaffViewModel.Name)"
                                                             ValueField="@nameof(StaffViewModel.Id)"
                                                             Filterable="true"
                                                             Id="thirdConsultant">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.ThirdConsultantId)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Ward" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox Value="@iPDRegisteration.WardId"
                                                             Data="@wards"
                                                             Placeholder="Select Ward"
                                                             TextField="@nameof(BasicInformationViewModel.Name)"
                                                             ValueField="@nameof(BasicInformationViewModel.Id)"
                                                             Filterable="true"
                                                             ValueExpression="@( () => iPDRegisteration.WardId)"
                                                             ValueChanged="@( (int c) => WardChanged(c) )"
                                                             Id="ward"
                                                             Enabled="@(iPDRegisteration.Id == 0)">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.WardId)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Room Type" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox Value="@iPDRegisteration.RoomTypeId"
                                                             Data="@roomTypes"
                                                             Placeholder="Select Room Type"
                                                             TextField="@nameof(RoomTypeViewModel.Name)"
                                                             ValueField="@nameof(RoomTypeViewModel.Id)"
                                                             Filterable="true"
                                                             ValueExpression="@( () => iPDRegisteration.RoomTypeId)"
                                                             ValueChanged="@( (int c) => RoomTypeChanged(c) )"
                                                             Enabled="@(iPDRegisteration.Id == 0)"
                                                             Id="roomtype">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.RoomTypeId)" />
                                </MudItem>
                                <MudItem md="6">
                                    <TelerikFloatingLabel Text="Room" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox Value="@iPDRegisteration.RoomId"
                                                             Data="@rooms"
                                                             Placeholder="Select Room"
                                                             TextField="@nameof(RoomViewModel.Name)"
                                                             ValueField="@nameof(RoomViewModel.Id)"
                                                             Filterable="true"
                                                             ValueExpression="@( () => iPDRegisteration.RoomId)"
                                                             ValueChanged="@( (int c) => RoomChanged(c) )"
                                                             Enabled="@(iPDRegisteration.Id == 0)"
                                                             Id="room">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.RoomId)" />
                                </MudItem>
                                <MudItem md="4">
                                    <TelerikFloatingLabel Text="Bed" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.BedId"
                                                             Data="@beds"
                                                             Placeholder="Select Bed"
                                                             TextField="@nameof(BedViewModel.Name)"
                                                             ValueField="@nameof(BedViewModel.Id)"
                                                             Filterable="true"
                                                             Enabled="@(iPDRegisteration.Id == 0)"
                                                             Id="bed">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.BedId)" />
                                </MudItem>
                                <MudItem md="2">
                                    @if (selectBedAccess)
                                    {
                                        <MudButton Class="mr-2 mt-5" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Bed" OnClick="SelectBed" Disabled="@(iPDRegisteration.Id > 0)">Select Bed</MudButton>
                                    }
                                </MudItem>
                                <MudItem md="4">
                                    <TelerikFloatingLabel Text="Case Type" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.CaseTypeId"
                                                             Data="@caseTypes"
                                                             Placeholder="Select Case Type"
                                                             TextField="@nameof(BasicInformationViewModel.Name)"
                                                             ValueField="@nameof(BasicInformationViewModel.Id)"
                                                             Filterable="true"
                                                             Id="caseType">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.CaseTypeId)" />
                                </MudItem>
                                <MudItem md="4">
                                    <TelerikFloatingLabel Text="Witness" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikTextBox Placeholder="Witness"
                                                            @bind-Value="@iPDRegisteration.WitnessName"></TelerikTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.WitnessName)" />
                                </MudItem>
                                <MudItem md="4">
                                    <TelerikFloatingLabel Text="Relationship" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikComboBox @bind-Value="@iPDRegisteration.RelationshipId"
                                                             Data="@relationships"
                                                             Placeholder="Select Relationship"
                                                             TextField="@nameof(BasicInformationViewModel.Name)"
                                                             ValueField="@nameof(BasicInformationViewModel.Id)"
                                                             Filterable="true"
                                                             Id="relationship">
                                            </TelerikComboBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.RelationshipId)" />
                                </MudItem>
                                <MudItem md="12" Class="mb-2">
                                    <TelerikFloatingLabel Text="Details" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikTextBox Placeholder="Details"
                                                            @bind-Value="@iPDRegisteration.Details"></TelerikTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="12" Class="mb-2">
                                    <TelerikFloatingLabel Text="Agreement" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikTextBox Placeholder="Agreement"
                                                            @bind-Value="@iPDRegisteration.Agreement"></TelerikTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                
                                <MudItem md="12" Class="mb-2">
                                    <TelerikFloatingLabel Text="Description" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikTextBox Placeholder="Description"
                                                            @bind-Value="@iPDRegisteration.Description"></TelerikTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                            </MudGrid>
                        </TabStripTab>
                        <TabStripTab Title="Room(s)" Disabled="@(iPDRegisteration.Id == 0)">
                            <MudGrid Spacing="1">
                                <MudItem md="12">
                                    <TelerikGrid Data=@iPDRegisterationRooms EditMode="@GridEditMode.Inline"
                                                 Height="300px" Pageable="true" PageSize="5"
                                                 OnDelete=@DeleteRoom OnCreate=@CreateRoom>
                                        <GridToolBar>
                                            @if (addRoomAccess)
                                            {
                                                <GridCommandButton Command="Add">Change Room</GridCommandButton>
                                            }
                                            @if (selectBedAccess)
                                            {
                                                <MudButton Class="ml-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Bed" OnClick="SelectBed" Disabled="@(iPDRegisteration.Id == 0)">Beds Status</MudButton>
                                            }
                                        </GridToolBar>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.Date) Title="Date" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var RoomToEdit = context as IPDRegisterationRoomViewModel;

                                                        <TelerikDatePicker @bind-Value="@RoomToEdit.Date"
                                                                       Format="dddd, dd MMMM, yyyy"
                                                                       Id="ipd-room-date">
                                                        </TelerikDatePicker>
                                                        <TelerikValidationMessage For="@(() => RoomToEdit.Date)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.BedName) Title="Bed Name" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var RoomToEdit = context as IPDRegisterationRoomViewModel;

                                                        <TelerikMultiColumnComboBox Data="@beds"
                                                                                    TextField="@nameof(BedViewModel.Name)"
                                                                                    ValueField="@nameof(BedViewModel.Id)"
                                                                                    Filterable="true"
                                                                                    @bind-Value="@RoomToEdit.BedId"
                                                                                    Id="bed"
                                                                                    ListHeight="250px"
                                                                                    Placeholder="Hint: You can filter by the bed Name">
                                                            <MultiColumnComboBoxColumns>
                                                                <MultiColumnComboBoxColumn Field="@nameof(BedViewModel.Name)" Title="Bed" Width="150px" />
                                                                <MultiColumnComboBoxColumn Field="@nameof(BedViewModel.RoomName)" Title="Room" Width="150px" />
                                                                <MultiColumnComboBoxColumn Field="@nameof(BedViewModel.RoomTypeName)" Title="Room Type" Width="150px" />
                                                                <MultiColumnComboBoxColumn Field="@nameof(BedViewModel.WardName)" Title="Ward" Width="150px" />
                                                                
                                                            </MultiColumnComboBoxColumns>
                                                            <FooterTemplate>
                                                                <span class="combobox-footer k-display-flex k-align-items-center k-justify-content-center">
                                                                    Total: @beds.Count() records
                                                                </span>
                                                            </FooterTemplate>
                                                        </TelerikMultiColumnComboBox>
                                                        <TelerikValidationMessage For="@(() => RoomToEdit.BedId)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.Days) Title="Days" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.Rate) Title="Rate" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.Amount) Title="Amount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                            <GridColumn Field=@nameof(IPDRegisterationRoomViewModel.Description) Title="Description" Editable="true" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" />
                                            <GridCommandColumn Title="Action" Width="10vw" HeaderClass="k-text-center">
                                                @if (deleteRoomAccess)
                                                {
                                                    <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                                                }
                                                <GridCommandButton Command="Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary" ShowInEdit="true">Update</GridCommandButton>
                                                <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                            </GridCommandColumn>
                                        </GridColumns>
                                    </TelerikGrid>
                                </MudItem>
                            </MudGrid>
                        </TabStripTab>
                        <TabStripTab Title="Service(s)">
                            <MudGrid Spacing="1">
                                <MudItem md="12">
                                    <TelerikGrid Data=@iPDRegisterationServices EditMode="@GridEditMode.Inline"
                                                 Height="300px" Pageable="true" PageSize="5"
                                                 OnDelete=@DeleteService OnCreate=@CreateService>
                                        <GridToolBar>
                                            @if (addServiceAccess)
                                            {
                                                <GridCommandButton Command="Add">Add Service</GridCommandButton>
                                            }
                                        </GridToolBar>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.Date) Title="Date" Editable="true" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var ServiceToEdit = context as IPDRegisterationServiceViewModel;
                                                        
                                                        <TelerikDatePicker @bind-Value="@ServiceToEdit.Date"
                                                                       Format="yyyy-MM-dd"
                                                                       Id="ipd-service-date">
                                                        </TelerikDatePicker>
                                                        <TelerikValidationMessage For="@(() => ServiceToEdit.Date)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.ServiceName) Title="Service Name" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var ServiceToEdit = context as IPDRegisterationServiceViewModel;
                                                        <TelerikMultiColumnComboBox Data="@services"
                                                                                TextField="@nameof(ServiceViewModel.Name)"
                                                                                ValueField="@nameof(ServiceViewModel.Id)"
                                                                                Filterable="true"
                                                                                    @bind-Value="@ServiceToEdit.ServiceId"
                                                                                Id="patient"
                                                                                ListHeight="250px"
                                                                                Placeholder="Hint: You can filter by the Service Name">
                                                            <MultiColumnComboBoxColumns>
                                                                <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.Name)" Title="Name" Width="200px" />
                                                                <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.DepartmentName)" Title="Department Name" Width="150px" />
                                                                <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.OPDRate)" Title="OPD Rate" Width="150px"/>
                                                            </MultiColumnComboBoxColumns>
                                                            <FooterTemplate>
                                                                <span class="combobox-footer k-display-flex k-align-items-center k-justify-content-center">
                                                                    Total: @services.Count() records
                                                                </span>
                                                            </FooterTemplate>
                                                        </TelerikMultiColumnComboBox>

                                                        <TelerikValidationMessage For="@(() => ServiceToEdit.ServiceId)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.Quantity) Title="Quantity" Editable="true" Width="5vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var ServiceToEdit = context as IPDRegisterationServiceViewModel;
                                                        <TelerikNumericTextBox Placeholder="Quantity"
                                                                               @bind-Value="@ServiceToEdit.Quantity"
                                                                           Decimals="0"></TelerikNumericTextBox>
                                                        <TelerikValidationMessage For="@(() => ServiceToEdit.Quantity)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.Rate) Title="Rate" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.Discount) Title="Discount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.StaffName) Title="Consultant" Editable="true" Width="15vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var ServiceToEdit = context as IPDRegisterationServiceViewModel;
                                                        <TelerikComboBox @bind-Value="@ServiceToEdit.StaffId"
                                                                     Data="@staffs"
                                                                     Placeholder="Select Consultant"
                                                                     TextField="@nameof(StaffViewModel.Name)"
                                                                     ValueField="@nameof(StaffViewModel.Id)"
                                                                     Filterable="true"
                                                                     Id="staff">
                                                        </TelerikComboBox>
                                                        <TelerikValidationMessage For="@(() => ServiceToEdit.StaffId)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationServiceViewModel.Amount) Title="Amount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                            <GridCommandColumn Title="Action" Width="10vw" HeaderClass="k-text-center">
                                                @if (deleteServiceAccess)
                                                {
                                                    <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                                                }
                                                <GridCommandButton Command="Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary" ShowInEdit="true">Update</GridCommandButton>
                                                <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                            </GridCommandColumn>
                                        </GridColumns>
                                    </TelerikGrid>
                                </MudItem>
                            </MudGrid>
                        </TabStripTab>
                        <TabStripTab Title="Payment(s)">
                            <MudGrid Spacing="1">
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Room Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Room Amount" Enabled="false"
                                                                   @bind-Value="@roomAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Service Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Service Amount" Enabled="false"
                                                                   @bind-Value="@serviceAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Medicine Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Medicine Amount" Enabled="false"
                                                                   @bind-Value="@medicineAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Total Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Total Amount" Enabled="false"
                                                                   @bind-Value="@iPDRegisteration.TotalAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                    <TelerikValidationMessage For="@(() => iPDRegisteration.TotalAmount)" />
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Total Discount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Total Discount" Enabled="false"
                                                                   @bind-Value="@totalDiscount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Payable Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Payable Amount" Enabled="false"
                                                                   @bind-Value="@iPDRegisteration.PayableAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Paid Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Paid Amount" Enabled="false"
                                                                   @bind-Value="@paidAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="3">
                                    <TelerikFloatingLabel Text="Remain Amount" Class="custom-label w-100">
                                        <div class="k-form-field-wrap">
                                            <TelerikNumericTextBox Placeholder="Remain Amount" Enabled="false"
                                                                   @bind-Value="@remainAmount"
                                                                   Format="@currencySetting.CurrencyTextBoxFormat"
                                                                   Decimals="0"></TelerikNumericTextBox>
                                        </div>
                                    </TelerikFloatingLabel>
                                </MudItem>
                                <MudItem md="12">
                                    <TelerikGrid Data=@iPDRegisterationPayments EditMode="@GridEditMode.Inline"
                                                 Height="300px" Pageable="true" PageSize="5"
                                                 OnDelete=@DeletePayment OnCreate=@CreatePayment>
                                        <GridToolBar>
                                            @if (addPaymentAccess)
                                            {
                                                <GridCommandButton Command="Add">Add Payment</GridCommandButton>
                                            }
                                        </GridToolBar>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(IPDRegisterationPaymentViewModel.PaymentTypeName) Title="Payment Type" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var PaymentToEdit = context as IPDRegisterationPaymentViewModel;
                                                        <TelerikComboBox @bind-Value="@PaymentToEdit.PaymentTypeId"
                                                                     Data="@paymentTypes"
                                                                     Placeholder="Select Payment Type"
                                                                     TextField="@nameof(BasicInformationViewModel.Name)"
                                                                     ValueField="@nameof(BasicInformationViewModel.Id)"
                                                                     Filterable="true"
                                                                     Id="payment">
                                                        </TelerikComboBox>
                                                        <TelerikValidationMessage For="@(() => PaymentToEdit.PaymentTypeId)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationPaymentViewModel.DepartmentName) Title="Department" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                                <EditorTemplate>
                                                    @{
                                                        var PaymentToEdit = context as IPDRegisterationPaymentViewModel;
                                                        <TelerikComboBox @bind-Value="@PaymentToEdit.DepartmentId"
                                                                     Data="@departments"
                                                                     Placeholder="Select Department"
                                                                     TextField="@nameof(DepartmentViewModel.Name)"
                                                                     ValueField="@nameof(DepartmentViewModel.Id)"
                                                                     Filterable="true"
                                                                     Id="department">
                                                        </TelerikComboBox>
                                                        <TelerikValidationMessage For="@(() => PaymentToEdit.DepartmentId)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationPaymentViewModel.Amount) Title="Amount" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat">
                                                <EditorTemplate>
                                                    @{
                                                        var PaymentToEdit = context as IPDRegisterationPaymentViewModel;
                                                        <TelerikNumericTextBox Placeholder="Amount"
                                                                               @bind-Value="@PaymentToEdit.Amount"
                                                                               Format="@currencySetting.CurrencyTextBoxFormat"
                                                                                Decimals="0"></TelerikNumericTextBox>
                                                        <TelerikValidationMessage For="@(() => PaymentToEdit.Amount)" />
                                                    }
                                                </EditorTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(IPDRegisterationPaymentViewModel.Description) Title="Description" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" />
                                            <GridCommandColumn Title="Action" Width="10vw" HeaderClass="k-text-center">
                                                @if (printPaymentAccess)
                                                {
                                                    <GridCommandButton OnClick="@PrintPayment" ThemeColor="@ThemeConstants.Button.ThemeColor.Info">Print</GridCommandButton>
                                                }
                                                @if (deletePaymentAccess)
                                                {
                                                <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                                                }
                                                <GridCommandButton Command="Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary" ShowInEdit="true">Update</GridCommandButton>
                                                <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                            </GridCommandColumn>
                                        </GridColumns>
                                    </TelerikGrid>
                                </MudItem>
                            </MudGrid>
                        </TabStripTab>
                        <TabStripTab Title="Medicine(s)">
                            <MudGrid Spacing="1">
                                <MudItem md="12">

                                </MudItem>
                            </MudGrid>
                        </TabStripTab>
                    </TelerikTabStrip>
                    
                </FormItems>
                <FormButtons>
                    @if (saveAccess)
                    {
                        <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveIPDRegisteration">Save</MudButton>
                    }
                    @if (saveAccess && printAccess)
                    {
                        <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveAndPrintIPDRegisteration">Save/Print</MudButton>
                    }
                    @if (printAccess)
                    {
                        <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" Disabled="@(iPDRegisteration.Id==0)" OnClick="Print">Print</MudButton>
                    }
                    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="IPDRegisterations">Return</MudButton>
                </FormButtons>
            </TelerikForm>

        </MudPaper>
    </MudItem>
</MudGrid>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@addPatientWindowState Modal="true">
    <WindowTitle>
        <strong>Add Patient</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <PatientDefine Id="0" Mode="Modal" From="IPD" OnPatientAdded="PatientAdded"></PatientDefine>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@searchPatientWindowState Modal="true">
    <WindowTitle>
        <strong>Search Patient</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <Patients Mode="Search" From="IPD" OnPatientSelected="PatientSelected"></Patients>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@searchBedWindowState Modal="true">
    <WindowTitle>
        <strong>Free Bed</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <FreeBed Mode="@freeBedMode" OnBedSelected="BedSelected"></FreeBed>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@searchOPDPatientWindowState Modal="true">
    <WindowTitle>
        <strong>Search Patient from OPD List</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <OPDBills Mode="Search" OnPatientSelected="OPDPatientSelected"></OPDBills>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="40vw" Height="70vh" Centered="true" @bind-Visible=@selectReportTemplate Modal="true">
    <WindowTitle>
        <strong>Select Report Template</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <ReportTemplatesSelect Id="@iPDRegisteration.Id" ReportCode="IPD"></ReportTemplatesSelect>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="40vw" Height="70vh" Centered="true" @bind-Visible=@selectPaymentReportTemplate Modal="true">
    <WindowTitle>
        <strong>Select Report Template</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <ReportTemplatesSelect Id="@IPDPaymentId" ReportCode="IPDPayment"></ReportTemplatesSelect>
    </WindowContent>
</TelerikWindow>
@code {
    [Parameter]
    public int? Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    [CascadingParameter]
    public CurrencySetting currencySetting { get; set; }

    public int ActiveTabIndex { get; set; } = 0;
    private string caption = "Add IPD Registeration";
    private IPDRegisterationViewModel iPDRegisteration = new IPDRegisterationViewModel();
    private PatientViewModel patient = new PatientViewModel();
    private List<PatientViewModel> patients;
    private List<RefferByViewModel> refferBies;
    private List<BasicInformationViewModel> paymentTypes;
    private List<ServiceViewModel> services;
    private List<StaffViewModel> staffs;
    private List<BasicInformationViewModel> wards;
    private List<RoomTypeViewModel> roomTypes;
    private List<RoomViewModel> rooms;
    private List<BedViewModel> beds = new List<BedViewModel>();
    private List<DepartmentViewModel> departments;
    private List<BasicInformationViewModel> caseTypes;
    private List<BasicInformationViewModel> relationships;
    private List<IPDRegisterationServiceViewModel> iPDRegisterationServices = new List<IPDRegisterationServiceViewModel>();
    private List<IPDRegisterationRoomViewModel> iPDRegisterationRooms = new List<IPDRegisterationRoomViewModel>();
    private List<IPDRegisterationPaymentViewModel> iPDRegisterationPayments = new List<IPDRegisterationPaymentViewModel>();
    private SettingViewModel patientIdPrefix;

    private bool success;
    TelerikForm form;
    private int totalDiscount = 0;
    private int roomAmount = 0;
    private int serviceAmount = 0;
    private int medicineAmount = 0;
    private int paidAmount = 0;
    private int remainAmount = 0;
    private bool addPatientWindowState = false;
    private bool searchPatientWindowState = false;
    private bool searchOPDPatientWindowState = false;
    private bool searchBedWindowState = false;
    private bool selectReportTemplate = false;
    private bool selectPaymentReportTemplate = false;
    private int IPDPaymentId = 0;
    private string freeBedMode = "Select";

    private bool saveAccess = false;
    private bool printAccess = false;
    private bool addPatientAccess = false;
    private bool searchPatientAccess = false;
    private bool searchOPDAccess = false;
    private bool addRoomAccess = false;
    private bool deleteRoomAccess = false;
    private bool addServiceAccess = false;
    private bool deleteServiceAccess = false;
    private bool addPaymentAccess = false;
    private bool deletePaymentAccess = false;
    private bool printPaymentAccess = false;
    private bool selectBedAccess = false;

    protected override async Task OnInitializedAsync()
    {
        if(currencySetting ==null)
        {
            SettingHelper settingHelper = new SettingHelper(mediator);
            currencySetting = await settingHelper.GetCurrencySetting();
        }

        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/IPDRegisterationDefine/View");
        }
        saveAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "Save", userInfo.UserId));
        printAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "Print", userInfo.UserId));
        addPatientAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "AddPatient", userInfo.UserId));
        searchPatientAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "SearchPatient", userInfo.UserId));
        searchOPDAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "SearchOPD", userInfo.UserId));
        addRoomAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "AddRoom", userInfo.UserId));
        deleteRoomAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "DeleteRoom", userInfo.UserId));
        addServiceAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "AddService", userInfo.UserId));
        deleteServiceAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "DeleteService", userInfo.UserId));
        addPaymentAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "AddPayment", userInfo.UserId));
        deletePaymentAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "DeletePayment", userInfo.UserId));
        printPaymentAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "PrintPayment", userInfo.UserId));
        selectBedAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterationDefine", "SelectBed", userInfo.UserId));

        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        patients = await mediator.Send(new GetAllPatientsQuery());
        refferBies = await mediator.Send(new GetAllRefferBiesQuery());
        services = await mediator.Send(new GetAllServicesQuery());
        staffs = await mediator.Send(new GetAllStaffsQuery());
        paymentTypes = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("PaymentType"));
        wards = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("Ward"));
        roomTypes = await mediator.Send(new GetAllRoomTypesQuery());
        rooms = await mediator.Send(new GetAllRoomsQuery());

        var allBeds = await mediator.Send(new GetAllBedsQuery());
        var ipdRooms = await mediator.Send(new GetAllIPDRegisterationRoomsQuery());
        foreach (var bed in allBeds)
        {
            if (!ipdRooms.Exists(r => r.BedId == bed.Id && r.ToDate == null && r.IPDRegisteration.Discharged == false))
            {
                beds.Add(bed);
            }
        }

        departments = await mediator.Send(new GetAllDepartmentsQuery());
        caseTypes = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("CaseType"));
        relationships = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("Relationship"));

        iPDRegisteration.Date = DateTime.Now;

        if (Id > 0)
        {
            caption = "Edit IPD Registeration";

            iPDRegisteration = await mediator.Send(new GetIPDRegisterationByIdQuery(Convert.ToInt32(Id)));


            if (iPDRegisteration != null)
            {
                patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));

                iPDRegisterationRooms = await mediator.Send(new GetIPDRegisterationRoomsByIPDRegisterationIdQuery(iPDRegisteration.Id));
                CalculateRoomDays();

                iPDRegisterationServices = await mediator.Send(new GetIPDRegisterationServicesByIPDRegisterationIdQuery(iPDRegisteration.Id));
                iPDRegisterationPayments = await mediator.Send(new GetIPDRegisterationPaymentsByIPDRegisterationIdQuery(iPDRegisteration.Id));

                foreach (var billService in iPDRegisterationServices)
                {
                    var service = await mediator.Send(new GetServiceByIdQuery(billService.ServiceId ?? 0));

                    if (service != null)
                    {
                        billService.ServiceCode = service.Code;
                        billService.ServiceName = service.Name;
                        billService.Rate = service.OPDRate;
                        if (service.DiscountAmount > 0)
                            billService.Discount = service.DiscountAmount;

                        if (service.DiscountPercentage > 0)
                            billService.Discount = (service.OPDRate * service.DiscountPercentage) / 100;

                        billService.Amount = billService.Quantity * (billService.Rate - billService.Discount);
                    }

                    var staff = await mediator.Send(new GetStaffByIdQuery(billService.StaffId ?? 0));

                    if (staff != null)
                    {
                        billService.StaffCode = staff.Code;
                        billService.StaffName = staff.Name;
                    }


                    CalculateAmount();

                }
            }
        }


    }

    protected async Task WardChanged(int WardId)
    {
        if (WardId > 0)
        {
            var ward = await mediator.Send(new GetBasicInformationByIdQuery(WardId));
            iPDRegisteration.WardId = WardId;
            iPDRegisteration.WardName = ward.Name;

            roomTypes = await mediator.Send(new GetRoomTypeByWardIdQuery(WardId));
            iPDRegisteration.RoomTypeId = 0;
            iPDRegisteration.RoomTypeName = null;
        }
        else
        {
            roomTypes = await mediator.Send(new GetAllRoomTypesQuery());
            iPDRegisteration.RoomTypeId = 0;
            iPDRegisteration.RoomTypeName = null;
        }
    }

    protected async Task RoomTypeChanged(int RoomTypeId)
    {
        if (RoomTypeId > 0)
        {
            var roomType = await mediator.Send(new GetRoomTypeByIdQuery(RoomTypeId));
            iPDRegisteration.RoomTypeId = RoomTypeId;
            iPDRegisteration.RoomTypeName = roomType.Name;

            rooms = await mediator.Send(new GetRoomByRoomTypeIdQuery(RoomTypeId));
            iPDRegisteration.RoomId = 0;
            iPDRegisteration.RoomName = null;
        }
        else
        {
            rooms = await mediator.Send(new GetAllRoomsQuery());
            iPDRegisteration.RoomId = 0;
            iPDRegisteration.RoomName = null;
        }
    }

    protected async Task RoomChanged(int RoomId)
    {
        beds.Clear();

        if (RoomId > 0)
        {
            var room = await mediator.Send(new GetRoomByIdQuery(RoomId));
            iPDRegisteration.RoomId = RoomId;
            iPDRegisteration.RoomName = room.Name;

            var allBeds = await mediator.Send(new GetAllBedsQuery());
            var ipdRooms = await mediator.Send(new GetAllIPDRegisterationRoomsQuery());
            foreach (var bed in allBeds)
            {
                if(!ipdRooms.Exists(r => r.BedId == bed.Id && r.ToDate == null && r.IPDRegisteration.Discharged == false))
                {
                    beds.Add(bed);
                }
            }

            iPDRegisteration.BedId = 0;
            iPDRegisteration.BedName = null;
        }
        else
        {
            var allBeds = await mediator.Send(new GetAllBedsQuery());
            var ipdRooms = await mediator.Send(new GetAllIPDRegisterationRoomsQuery());
            foreach (var bed in allBeds)
            {
                if (!ipdRooms.Exists(r => r.BedId == bed.Id && r.ToDate == null && r.IPDRegisteration.Discharged == false))
                {
                    beds.Add(bed);
                }
            }

            iPDRegisteration.BedId = 0;
            iPDRegisteration.BedName = null;
        }
    }

    public bool ValidSubmit { get; set; } = false;

    async void HandleValidSubmit()
    {
        ValidSubmit = true;

        await Task.Delay(2000);

        ValidSubmit = false;

        StateHasChanged();
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    private async void CreateRoom(GridCommandEventArgs args)
    {
        IPDRegisterationRoomViewModel iPDRoom = (IPDRegisterationRoomViewModel)args.Item;

        DateTime date = new DateTime(iPDRoom.Date.Year, iPDRoom.Date.Month, iPDRoom.Date.Day, DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second);

        var prevRoom = iPDRegisterationRooms.FirstOrDefault(r => r.ToDate == null);
        iPDRoom.Date=date;

        if(prevRoom != null)
        {
            prevRoom.ToDate = iPDRoom.Date;

        }

        var bed = await mediator.Send(new GetBedByIdQuery(iPDRoom.BedId ?? 0));

        if (bed != null)
        {
            iPDRoom.BedCode = bed.Code;
            iPDRoom.BedName = bed.Name;
            iPDRoom.Rate = bed.Room.Cost;
            iPDRoom.Days = 1;

            iPDRoom.Amount = iPDRoom.Days * bed.Room.Cost;
        }


        iPDRegisterationRooms.Add(iPDRoom);

        CalculateRoomDays();
        CalculateAmount();
        //ProductService.CreateProduct((ProductDto)args.Item);
        //LoadData();
    }

    private void DeleteRoom(GridCommandEventArgs args)
    {

        IPDRegisterationRoomViewModel iPDRoom = (IPDRegisterationRoomViewModel)args.Item;

        iPDRegisterationRooms.Remove(iPDRoom);

        var lastRoom = iPDRegisterationRooms.OrderByDescending(r => r.Date).FirstOrDefault();
        if(lastRoom != null)
            lastRoom.ToDate = null;

        CalculateRoomDays();
        CalculateAmount();
        //ProductService.DeleteProduct((ProductDto)args.Item);
        //LoadData();
    }

    protected async Task CalculateRoomDays()
    {
        foreach(var room in iPDRegisterationRooms)
        {
            DateTime toDate;

            if(room.ToDate == null)
            {
                toDate = DateTime.Now;
            }
            else
            {
                toDate = room.ToDate ?? DateTime.Now;
            }

            TimeSpan span = toDate.Subtract(room.Date);

            room.Days = span.Days + 1;

            room.Amount = room.Days * room.Rate;
        }
    }

    private async void CreateService(GridCommandEventArgs args)
    {
        IPDRegisterationServiceViewModel billService = (IPDRegisterationServiceViewModel)args.Item;

        var service = await mediator.Send(new GetServiceByIdQuery(billService.ServiceId ?? 0));

        if (service != null)
        {
            billService.ServiceCode = service.Code;
            billService.ServiceName = service.Name;
            billService.Rate = service.OPDRate;
            if (service.DiscountAmount > 0)
                billService.Discount = service.DiscountAmount;

            if (service.DiscountPercentage > 0)
                billService.Discount = (service.OPDRate * service.DiscountPercentage) / 100;

            billService.Amount = billService.Quantity * (billService.Rate - billService.Discount);
        }

        var staff = await mediator.Send(new GetStaffByIdQuery(billService.StaffId ?? 0));

        if (staff != null)
        {
            billService.StaffCode = staff.Code;
            billService.StaffName = staff.Name;
        }

        iPDRegisterationServices.Add(billService);

        CalculateAmount();
        //ProductService.CreateProduct((ProductDto)args.Item);
        //LoadData();
    }

    private void DeleteService(GridCommandEventArgs args)
    {

        IPDRegisterationServiceViewModel billService = (IPDRegisterationServiceViewModel)args.Item;

        iPDRegisterationServices.Remove(billService);

        CalculateAmount();
        //ProductService.DeleteProduct((ProductDto)args.Item);
        //LoadData();
    }

    private async void CreatePayment(GridCommandEventArgs args)
    {
        IPDRegisterationPaymentViewModel iPDPayment = (IPDRegisterationPaymentViewModel)args.Item;

        if(iPDRegisteration.PayableAmount < (iPDRegisterationPayments.Sum(p => p.Amount)+iPDPayment.Amount))
        {
            Snackbar.Add("The amount entered is more than the total payable amount calculated", Severity.Warning);
            return;
        }

        var payment = await mediator.Send(new GetBasicInformationByIdQuery(iPDPayment.PaymentTypeId ?? 0));

        if (payment != null)
        {
            iPDPayment.PaymentTypeCode = payment.Code;
            iPDPayment.PaymentTypeStrCode = payment.StrCode;
            iPDPayment.PaymentTypeName = payment.Name;

        }

        var department = await mediator.Send(new GetDepartmentByIdQuery(iPDPayment.DepartmentId ?? 0));

        if (department != null)
        {
            iPDPayment.DepartmentCode = department.Code;
            iPDPayment.DepartmentName = department.Name;

        }


        iPDRegisterationPayments.Add(iPDPayment);

        CalculateAmount();
        //ProductService.CreateProduct((ProductDto)args.Item);
        //LoadData();
    }

    private void DeletePayment(GridCommandEventArgs args)
    {
        if(iPDRegisteration.Discharged == true)
        {
            Snackbar.Add("Due to the discharge, it is not possible to remove the payment", Severity.Warning);
        }
        IPDRegisterationPaymentViewModel iPDPayment = (IPDRegisterationPaymentViewModel)args.Item;

        iPDRegisterationPayments.Remove(iPDPayment);

        CalculateAmount();
        //ProductService.DeleteProduct((ProductDto)args.Item);
        //LoadData();
    }

    protected async Task PrintPayment(GridCommandEventArgs args)
    {
        IPDRegisterationPaymentViewModel iPDPayment = (IPDRegisterationPaymentViewModel)args.Item;

        IPDPaymentId = iPDPayment.Id;

        selectPaymentReportTemplate = true;
    }

    private async void CalculateAmount()
    {
        var serviceTotal = iPDRegisterationServices.Sum(b => b.Rate * b.Quantity);
        var servicePayable = iPDRegisterationServices.Sum(b => b.Amount);

        var roomTotal = iPDRegisterationRooms.Sum(b => b.Rate * b.Days);
        var roomPayable = iPDRegisterationRooms.Sum(b => b.Amount);

        iPDRegisteration.TotalAmount = serviceTotal + roomTotal;
        iPDRegisteration.PayableAmount = servicePayable + roomPayable;
        totalDiscount = (serviceTotal + roomTotal) - (servicePayable + roomPayable);

        roomAmount=roomTotal;
        serviceAmount=serviceTotal;
        medicineAmount = 0;
        paidAmount= iPDRegisterationPayments.Sum(p => p.Amount);
        remainAmount = iPDRegisteration.PayableAmount - paidAmount;
    }

    protected async Task NewPatient()
    {
        addPatientWindowState = true;


    }

    protected async Task PatientAdded(int PatientId)
    {
        patients = await mediator.Send(new GetAllPatientsQuery());
        iPDRegisteration.PatientId = PatientId;

        patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));

        addPatientWindowState = false;
    }

    protected async Task SearchPatient()
    {
        searchPatientWindowState = true;

    }

    protected async Task PatientSelected(int PatientId)
    {
        iPDRegisteration.PatientId = PatientId;

        patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));

        searchPatientWindowState = false;
    }

    protected async Task SelectBed()
    {
        searchBedWindowState = true;

    }

    protected async Task BedSelected(int BedId)
    {
        if (BedId > 0)
        {
            var bed = await mediator.Send(new GetBedByIdQuery(BedId));
            if (bed != null)
            {
                iPDRegisteration.WardId = bed.Room.RoomType.Ward.Id;
                iPDRegisteration.WardName = bed.Room.RoomType.Ward.Name;
                WardChanged(iPDRegisteration.WardId);

                iPDRegisteration.RoomTypeId = bed.Room.RoomType.Id;
                iPDRegisteration.RoomTypeName = bed.Room.RoomType.Name;
                RoomTypeChanged(iPDRegisteration.RoomTypeId);

                iPDRegisteration.RoomId = bed.Room.Id;
                iPDRegisteration.RoomName = bed.Room.Name;
                RoomChanged(iPDRegisteration.RoomId);

                iPDRegisteration.BedId = bed.Id;
                iPDRegisteration.BedName = bed.Name;

            }
        }
        searchBedWindowState = false;
    }

    protected async Task SearchOPDPatient()
    {
        searchOPDPatientWindowState = true;

    }

    protected async Task OPDPatientSelected(int OPDBillId)
    {
        var oPDBill = await mediator.Send(new GetOPDBillByIdQuery(OPDBillId));

        if (oPDBill != null)
        {
            iPDRegisteration.OPDBillId = oPDBill.Id;
            iPDRegisteration.PatientId = oPDBill.PatientId;

            patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));
        }

        searchOPDPatientWindowState = false;
    }

    protected async Task PatientChanged(int PatientId)
    {
        iPDRegisteration.PatientId = PatientId;
        patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));
    }

    //protected async Task DateOfBirthChange()
    //{
    //    if (IPDRegisteration.Patient.DateOfBirth != null)
    //    {
    //        DateTime dateOfBirth = IPDRegisteration.Patient.DateOfBirth ?? DateTime.Now;
    //        TimeSpan span = DateTime.Now - dateOfBirth;
    //        DateTime age = DateTime.MinValue + span;

    //        // Make adjustment due to MinValue equalling 1/1/1
    //        int years = age.Year - 1;
    //        int months = age.Month - 1;
    //        int days = age.Day - 1;

    //        patientAge = String.Format("{0} Years, {1} Months, {2} Days", years, months, days);
    //    }
    //    else
    //    {
    //        patientAge = "Unknown";
    //    }

    //}

    protected async Task SaveIPDRegisteration()
    {

        if (form.IsValid())
        {

            CommandResponse result = new CommandResponse()
                {
                    Id = iPDRegisteration.Id,
                    ResultType = ResultType.None,
                    ResultMessage = ""
                };

            if (iPDRegisteration.Id > 0)
            {
                try
                {
                    iPDRegisteration.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPDRegisteration);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            iPDRegisteration.Id = result.Id;

                            SaveServices();

                            SaveRooms();

                            SavePayments();


                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected IPDRegisteration", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    iPDRegisteration.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateIPDRegisterationCommand>(iPDRegisteration);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        iPDRegisteration.Id = result.Id;

                        SaveServices();

                        AddRoom();
                        SaveRooms();

                        SavePayments();


                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }

            if (result.ResultType == ResultType.Success)
            {
                navManager.NavigateTo("IPDRegisterations");
            }
        }

    }

    protected async Task SaveAndPrintIPDRegisteration()
    {

        if (form.IsValid())
        {

            CommandResponse result = new CommandResponse()
                {
                    Id = iPDRegisteration.Id,
                    ResultType = ResultType.None,
                    ResultMessage = ""
                };

            if (iPDRegisteration.Id > 0)
            {
                try
                {
                    iPDRegisteration.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPDRegisteration);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            iPDRegisteration.Id = result.Id;

                            SaveServices();

                            SaveRooms();

                            SavePayments();


                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected IPDRegisteration", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    iPDRegisteration.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateIPDRegisterationCommand>(iPDRegisteration);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        iPDRegisteration.Id = result.Id;

                        SaveServices();

                        AddRoom();
                        SaveRooms();

                        SavePayments();


                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }

            if (result.ResultType == ResultType.Success)
            {
                Print();
            }
        }

    }

    protected async Task AddRoom()
    {
        IPDRegisterationRoomViewModel iPDRoom = new IPDRegisterationRoomViewModel();

        var bed = await mediator.Send(new GetBedByIdQuery(iPDRegisteration.BedId ?? 0));

        if (bed != null)
        {
            iPDRoom.IPDRegisterationId = iPDRegisteration.Id;
            iPDRoom.Date = iPDRegisteration.Date;
            iPDRoom.BedId = iPDRegisteration.BedId;
            iPDRoom.BedCode = bed.Code;
            iPDRoom.BedName = bed.Name;
            iPDRoom.Days = 1;
            iPDRoom.Rate = bed.Room.Cost;

            iPDRoom.Amount = iPDRoom.Days * bed.Room.Cost;

            iPDRoom.CreatedUser = userInfo?.Username;

        }


        iPDRegisterationRooms.Add(iPDRoom);

        CalculateAmount();        
    }

    protected async Task SaveRooms()
    {
        var billRooms = await mediator.Send(new GetIPDRegisterationRoomsByIPDRegisterationIdQuery(iPDRegisteration.Id));

        foreach (var room in iPDRegisterationRooms)
        {
            room.IPDRegisterationId = iPDRegisteration.Id;
            if (billRooms.Exists(b => b.BedId == room.BedId))
            {


                var editCommand = MapperConfig.Mapper.Map<EditIPDRegisterationRoomCommand>(room);

                await mediator.Send(editCommand);
            }
            else
            {
                var addCommand = MapperConfig.Mapper.Map<CreateIPDRegisterationRoomCommand>(room);

                await mediator.Send(addCommand);
            }
        }

        foreach (var billRoom in billRooms)
        {
            if (!iPDRegisterationRooms.Exists(b => b.BedId == billRoom.BedId))
            {
                await mediator.Send(new DeleteIPDRegisterationRoomCommand(billRoom.Id));
            }

        }
    }

    protected async Task SaveServices()
    {
        var billServices = await mediator.Send(new GetIPDRegisterationServicesByIPDRegisterationIdQuery(iPDRegisteration.Id));

        foreach (var service in iPDRegisterationServices)
        {
            service.IPDRegisterationId = iPDRegisteration.Id;
            if (billServices.Exists(b => b.ServiceId == service.ServiceId))
            {


                var editCommand = MapperConfig.Mapper.Map<EditIPDRegisterationServiceCommand>(service);

                await mediator.Send(editCommand);
            }
            else
            {
                var addCommand = MapperConfig.Mapper.Map<CreateIPDRegisterationServiceCommand>(service);

                await mediator.Send(addCommand);
            }
        }

        foreach (var billService in billServices)
        {
            if (!iPDRegisterationServices.Exists(b => b.ServiceId == billService.ServiceId))
            {
                await mediator.Send(new DeleteIPDRegisterationServiceCommand(billService.Id));
            }

        }

    }

    protected async Task SavePayments()
    {
        var billPayments = await mediator.Send(new GetIPDRegisterationPaymentsByIPDRegisterationIdQuery(iPDRegisteration.Id));

        foreach (var payment in iPDRegisterationPayments)
        {
            payment.IPDRegisterationId = iPDRegisteration.Id;
            if (billPayments.Exists(b => b.Date == payment.Date))
            {


                var editCommand = MapperConfig.Mapper.Map<EditIPDRegisterationPaymentCommand>(payment);

                await mediator.Send(editCommand);
            }
            else
            {
                var addCommand = MapperConfig.Mapper.Map<CreateIPDRegisterationPaymentCommand>(payment);

                await mediator.Send(addCommand);
            }
        }

        foreach (var billPayment in billPayments)
        {
            if (!iPDRegisterationPayments.Exists(b => b.Date == billPayment.Date))
            {
                await mediator.Send(new DeleteIPDRegisterationPaymentCommand(billPayment.Id));
            }

        }

    }

    protected async Task Print()
    {
        selectReportTemplate = true;

    }

    
}

