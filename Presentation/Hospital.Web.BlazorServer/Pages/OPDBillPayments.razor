@page "/OPDBillPayments/{OPDId:int}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using Hospital.Web.BlazorServer.Models;
@using MediatR
@using System.ComponentModel.DataAnnotations
@using System.Globalization;
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<MudGrid Spacing="1">
    <MudItem md="12">
        <MudText>@String.Format("{0} Debt Amount for OPD Bill No {1} is {2}",oPDBill.PatientName,@UtilityHelper.GenerateIdentifier(receiptNoPrefix.Value,oPDBill.Id),oPDBill.DebtAmount)</MudText>
    </MudItem>
    <MudItem md="12">
        <TelerikGrid Data=@payments EditMode="@GridEditMode.Inline"
                     Height="400px" Pageable="true" PageSize="5"
                     OnDelete=@DeletePayment OnCreate=@CreatePayment>
            <GridToolBar>
                <GridCommandButton Command="Add">Add Payment</GridCommandButton>
            </GridToolBar>
            <GridColumns>
                <GridColumn Field=@nameof(OPDBillPaymentViewModel.Date) Title="Date" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                    <EditorTemplate>
                        @{
                            var PaymentToEdit = context as OPDBillPaymentViewModel;

                            <TelerikDatePicker @bind-Value="@PaymentToEdit.Date"
                                           Format="dddd, dd MMMM, yyyy"
                                           Id="ipd-payment-date">
                            </TelerikDatePicker>
                            <TelerikValidationMessage For="@(() => PaymentToEdit.Date)" />
                        }
                    </EditorTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(OPDBillPaymentViewModel.Amount) Title="Amount" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                    <EditorTemplate>
                        @{
                            var PaymentToEdit = context as OPDBillPaymentViewModel;
                            <TelerikNumericTextBox Placeholder="Amount"
                                                   @bind-Value="@PaymentToEdit.Amount"
                                               Format="N0"
                                               Decimals="0"></TelerikNumericTextBox>
                            <TelerikValidationMessage For="@(() => PaymentToEdit.Amount)" />
                        }
                    </EditorTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(OPDBillPaymentViewModel.Description) Title="Description" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" />
                <GridCommandColumn Title="Action" Width="10vw" HeaderClass="k-text-center">
                    <GridCommandButton OnClick="@Print" ThemeColor="@ThemeConstants.Button.ThemeColor.Info">Print</GridCommandButton>
                    <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                    <GridCommandButton Command="Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary" ShowInEdit="true">Update</GridCommandButton>
                    <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                </GridCommandColumn>
            </GridColumns>
        </TelerikGrid>
    </MudItem>
</MudGrid>

<TelerikWindow Class="demo-window" Width="40vw" Height="70vh" Centered="true" @bind-Visible=@selectReportTemplate Modal="true">
    <WindowTitle>
        <strong>Select Report Template</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <ReportTemplatesSelect Id="@OPDPaymentId" ReportCode="OPDPayment"></ReportTemplatesSelect>
    </WindowContent>
</TelerikWindow>

@code {
    [Parameter]
    public int OPDId { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    [CascadingParameter]
    public CurrencySetting currencySetting { get; set; }
    [Parameter]
    public EventCallback<int> OnPaymentAdded { get; set; }

    private List<OPDBillPaymentViewModel> payments;
    private OPDBillViewModel oPDBill;
    private SettingViewModel receiptNoPrefix;
    private bool selectReportTemplate = false;
    private int OPDPaymentId = 0;


    protected override async Task OnInitializedAsync()
    {
        receiptNoPrefix = await mediator.Send(new GetSettingByKeyQuery("OPDReceiptNoPrefix"));

        oPDBill = await mediator.Send(new GetOPDBillByIdQuery(OPDId));

        payments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(OPDId));
    }


    private async void CreatePayment(GridCommandEventArgs args)
    {
        OPDBillPaymentViewModel oPDPayment = (OPDBillPaymentViewModel)args.Item;

        oPDPayment.OPDBillId = OPDId;

        if (oPDPayment.Amount <= oPDBill.DebtAmount)
        {

            var command = MapperConfig.Mapper.Map<CreateOPDBillPaymentCommand>(oPDPayment);

            CommandResponse result = await mediator.Send(command);

            if (result.ResultType == ResultType.Success)
            {
                payments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(OPDId));

                oPDBill = await mediator.Send(new GetOPDBillByIdQuery(OPDId));

                await OnPaymentAdded.InvokeAsync(OPDId);

                
            }

        }
    }

    private async void DeletePayment(GridCommandEventArgs args)
    {

        OPDBillPaymentViewModel oPDPayment = (OPDBillPaymentViewModel)args.Item;

        await mediator.Send(new DeleteOPDBillPaymentCommand(oPDPayment.Id));

        payments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(OPDId));

        oPDBill = await mediator.Send(new GetOPDBillByIdQuery(OPDId));
    }

    protected async Task Print(GridCommandEventArgs args)
    {
        OPDBillPaymentViewModel oPDPayment = (OPDBillPaymentViewModel)args.Item;

        OPDPaymentId = oPDPayment.Id;

        selectReportTemplate = true;
    }

}

