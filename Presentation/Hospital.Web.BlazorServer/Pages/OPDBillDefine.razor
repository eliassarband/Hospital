@page "/OPDBillDefine/{Id:int?}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@using System.ComponentModel.DataAnnotations
@using Telerik.Blazor;
@using Telerik.Blazor.Components;
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>@caption</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="6">
                                <MudDatePicker Label="Date" @bind-Date="@oPDBill.Date" TitleDateFormat="dddd, dd MMMM" Variant="Variant.Outlined" Required="true" RequiredError="Please Select Date" />
                            </MudItem>
                            <MudItem md="6">
                                <MudSelect Class="mt-1" T="int" Label="Patient" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Patient" @bind-value="@oPDBill.PatientId" @bind-Text="@oPDBill.PatientName" Clearable>
                                    @foreach (var p in patients)
                                    {
                                        <MudSelectItem T="int" Value="@p.Id">@p.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem md="12">
                                <TelerikGrid Data=@oPDBillServices EditMode="@GridEditMode.Popup"
                                             Height="300px" Pageable="true" PageSize="5"
                                             OnDelete=@DeleteItem OnCreate=@CreateItem>
                                    <GridToolBar>
                                        <GridCommandButton Command="Add">Add Service</GridCommandButton>
                                    </GridToolBar>
                                    <GridColumns>
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.ServiceName)  Title="Service Name" Editable="true" Width="15vw" TextAlign="ColumnTextAlign.Center">
                                            <EditorTemplate>
                                                @{
                                                    var ServiceToEdit = context as OPDBillServiceViewModel;
                                                    <TelerikDropDownList Data="@services" ValueField="Id" TextField="Name" @bind-Value="@ServiceToEdit.ServiceId" />
                                                }
                                            </EditorTemplate>
                                        </GridColumn>
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.Quantity) Title="Quantity" Editable="true" Width="10vw" TextAlign="ColumnTextAlign.Center" />
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.Rate) Title="Rate" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" />
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.Discount) Title="Discount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" />
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.StaffName) Title="Staff Name" Editable="true" Width="15vw" TextAlign="ColumnTextAlign.Center">
                                            <EditorTemplate>
                                                @{
                                                    var ServiceToEdit = context as OPDBillServiceViewModel;
                                                    <TelerikDropDownList Data="@staffs" ValueField="Id" TextField="Name" @bind-Value="@ServiceToEdit.StaffId" />
                                                }
                                            </EditorTemplate>
                                        </GridColumn>
                                        <GridColumn Field=@nameof(OPDBillServiceViewModel.Amount) Title="Amount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" />
                                        <GridCommandColumn Width="10vw">
                                            
                                                <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                                            
                                        </GridCommandColumn>
                                    </GridColumns>
                                </TelerikGrid>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@oPDBill.BillNo" MaxLength="20" Label="Bill Number" Placeholder="Bill Number" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@oPDBill.ReceiptNo" MaxLength="20" Label="Receipt Number" Placeholder="Receipt Number" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@oPDBill.TotalAmount" Label="Total Amount Number" Placeholder="Total Amount" Variant="Variant.Outlined" Clearable ReadOnly></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@oPDBill.PayableAmount" Label="Payable Number" Placeholder="Payable Number" Variant="Variant.Outlined" Clearable ReadOnly></MudNumericField>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@oPDBill.Description" MaxLength="100" Label="Description" Placeholder="Description" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveOPDBill" Disabled="@(!success)">Save</MudButton>
                        <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="OPDBills">Return</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public int? Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string caption = "Add OPD Bill";
    private OPDBillViewModel oPDBill = new OPDBillViewModel();
    private List<PatientViewModel> patients;
    private List<ServiceViewModel> services;
    private List<StaffViewModel> staffs;
    private List<OPDBillServiceViewModel> oPDBillServices = new List<OPDBillServiceViewModel>();
    bool success;
    MudForm form;


    protected override async Task OnInitializedAsync()
    {
        patients = await mediator.Send(new GetAllPatientsQuery());
        services = await mediator.Send(new GetAllServicesQuery());
        staffs = await mediator.Send(new GetAllStaffsQuery());


        if (Id > 0)
        {
            caption = "Edit OPDBill";

            oPDBill = await mediator.Send(new GetOPDBillByIdQuery(Convert.ToInt32(Id)));

            if (oPDBill != null)
            {
                oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));
            }
        }

    }

    private async void CreateItem(GridCommandEventArgs args)
    {
        OPDBillServiceViewModel billService = (OPDBillServiceViewModel)args.Item;

        var service = await mediator.Send(new GetServiceByIdQuery(billService.ServiceId??0));

        if (service != null)
        {
            billService.ServiceCode = service.Code;
            billService.ServiceName=service.Name;
            billService.Rate = service.OPDRate;
            if (service.DiscountAmount > 0)
                billService.Discount = service.DiscountAmount;

            if (service.DiscountPercentage > 0)
                billService.Discount = (service.OPDRate * service.DiscountPercentage) / 100;

            billService.Amount = billService.Quantity * (billService.Rate - billService.Discount);
        }

        var staff= await mediator.Send(new GetStaffByIdQuery(billService.StaffId??0));

        if (staff != null)
        {
            billService.StaffCode=staff.Code;
            billService.StaffName = staff.Name;
        }

        oPDBillServices.Add(billService);

        CalculateAmount();
        //ProductService.CreateProduct((ProductDto)args.Item);
        //LoadData();
    }

    private void DeleteItem(GridCommandEventArgs args)
    {

        OPDBillServiceViewModel billService = (OPDBillServiceViewModel)args.Item;

        oPDBillServices.Remove(billService);

        CalculateAmount();
        //ProductService.DeleteProduct((ProductDto)args.Item);
        //LoadData();
    }

    private async void CalculateAmount()
    {
        var total = oPDBillServices.Sum(b => b.Rate * b.Quantity);
        var payable = oPDBillServices.Sum(b => b.Amount);

        oPDBill.TotalAmount=total;
        oPDBill.PayableAmount = payable;
    }


    protected async Task SaveOPDBill()
    {
        form.Validate();

        if (form.IsValid)
        {
            CommandResponse result;


            if (oPDBill.Id > 0)
            {
                try
                {
                    oPDBill.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            var billServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(result.Id));

                            foreach (var service in oPDBillServices)
                            {
                                service.OPDBillId = result.Id;
                                if (billServices.Exists(b => b.ServiceId == service.Id))
                                {
                                    

                                    var editCommand = MapperConfig.Mapper.Map<EditOPDBillServiceCommand>(service);

                                    await mediator.Send(editCommand);
                                }
                                else
                                {
                                    var addCommand = MapperConfig.Mapper.Map<CreateOPDBillServiceCommand>(service);

                                    await mediator.Send(addCommand);
                                }
                            }

                            foreach (var billService in billServices)
                            {
                                if(!oPDBillServices.Exists(b => b.ServiceId==billService.ServiceId))
                                {
                                    await mediator.Send(new DeleteOPDBillServiceCommand(billService.Id));
                                }

                            }

                            if(Id>0)
                                navManager.NavigateTo("OPDBills");
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected OPDBill", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    oPDBill.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateOPDBillCommand>(oPDBill);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);
                        var billServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(result.Id));

                        foreach (var service in oPDBillServices)
                        {
                            service.OPDBillId = result.Id;

                            if (billServices.Exists(b => b.ServiceId == service.Id))
                            {
                                var editCommand = MapperConfig.Mapper.Map<EditOPDBillServiceCommand>(service);

                                await mediator.Send(editCommand);
                            }
                            else
                            {
                                var addCommand = MapperConfig.Mapper.Map<CreateOPDBillServiceCommand>(service);

                                await mediator.Send(addCommand);
                            }
                        }

                        foreach (var billService in billServices)
                        {
                            if (!oPDBillServices.Exists(b => b.ServiceId == billService.ServiceId))
                            {
                                await mediator.Send(new DeleteOPDBillServiceCommand(billService.Id));
                            }

                        }

                        if (Id > 0)
                            navManager.NavigateTo("OPDBills");
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

