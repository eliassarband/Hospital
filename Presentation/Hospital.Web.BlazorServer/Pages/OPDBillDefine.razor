@page "/OPDBillDefine/{Id:int?}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using Hospital.Web.BlazorServer.Models;
@using MediatR
@using System.ComponentModel.DataAnnotations
@using System.Globalization;
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<h1>@caption</h1>

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="p-3" Elevation="10">
            <TelerikForm @ref="form" Model="@oPDBill"
                     OnValidSubmit="@HandleValidSubmit"
                     OnInvalidSubmit="@HandleInvalidSubmit">
                <FormValidation>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    
                </FormValidation>
                <FormItems>
                    <MudGrid Spacing="1">
                        <MudItem md="6">
                            <TelerikButton ButtonType="Telerik.Blazor.ButtonType.Button" OnClick="@NewPatient">Add New Patient</TelerikButton>
                        
                            <TelerikButton ButtonType="Telerik.Blazor.ButtonType.Button" OnClick="@SearchPatient">Search Patient</TelerikButton>
                            
                                
                            
                        </MudItem>
                        <MudItem md="3">
                            @if (oPDBill.PatientId > 0)
                            {
                                <MudText>
                                    Patient Id : @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,oPDBill.PatientId)
                                </MudText>

                            }
                        </MudItem>
                        <MudItem md="3">
                            @if (oPDBill != null)
                            {
                                <MudText>
                                    Receipt No : @UtilityHelper.GenerateIdentifier(receiptNoPrefix.Value,oPDBill.Id)
                                </MudText>

                            }
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Date" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikDatePicker @bind-Value="@oPDBill.Date"
                                                        Format="dddd, dd MMMM, yyyy"
                                                        Id="opd-date"
                                                        Enabled="@(oPDBill.Id > 0 ? false : true)">
                                    </TelerikDatePicker>
                                </div>
                            </TelerikFloatingLabel>
                            <TelerikValidationMessage For="@(() => oPDBill.Date)" />
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Patient" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikMultiColumnComboBox Data="@patients"
                                                                TextField="@nameof(PatientViewModel.Name)"
                                                                ValueField="@nameof(PatientViewModel.Id)"
                                                                Filterable="true"
                                                                Value="@oPDBill.PatientId"
                                                                ValueExpression="@( () => oPDBill.PatientId )"
                                                                Id="patient"
                                                                ListHeight="250px"
                                                                Placeholder="Hint: You can filter by the Patient Name"
                                                                ValueChanged="@( (int c) => PatientChanged(c) )"
                                                                >
                                        <MultiColumnComboBoxColumns>
                                            <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.Name)" Title="Name" Width="200px" />
                                            <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.NationalIdCart)" Title="National ID" Width="150px" />
                                            <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.FatherName)" Title="Father" Width="150px" />
                                            <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.GenderName)" Title="Gender" Width="100px" />
                                            <MultiColumnComboBoxColumn Field="@nameof(PatientViewModel.Mobile)" Title="Mobile" Width="150px" />
                                        </MultiColumnComboBoxColumns>
                                        <FooterTemplate>
                                            <span class="combobox-footer k-display-flex k-align-items-center k-justify-content-center">
                                                Total: @patients.Count() records
                                            </span>
                                        </FooterTemplate>
                                    </TelerikMultiColumnComboBox>
                                </div>
                            </TelerikFloatingLabel>
                            <TelerikValidationMessage For="@(() => oPDBill.Patient)" />

                            
                        </MudItem>
                        @if(oPDBill.PatientId>0)
                        {
                             <MudItem md="12">
                                 <MudExpansionPanels>
                                    <MudExpansionPanel Text="@String.Format("{0} {1} Information ",patient.NamePrefixName, patient.Name)">
                                        <MudGrid Spacing="1" Class="m-2">
                                            <MudItem md="4">
                                                <MudText>Patient Id : @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,patient.Id)</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>National Card Id : @patient.NationalIdCart</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Father : @patient.FatherName</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Date of Birth : @Convert.ToDateTime(patient.DateOfBirth??DateTime.Now).ToLongDateString()</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Age : @DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now)</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Gender : @patient.GenderName</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Reffer By : @patient.RefferByName</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Occupation : @patient.Occupation</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Insurance : @patient.InsuranceName</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Insurance Number : @patient.InsuranceNumber</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Proposal Number : @patient.ProposalNumber</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Phone No : @patient.Phone</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Mobile No : @patient.Mobile</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Email Address : @patient.Email</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>City : @patient.CityName</MudText>
                                            </MudItem>
                                            <MudItem md="4">
                                                <MudText>Area : @patient.AreaName</MudText>
                                            </MudItem>
                                            <MudItem md="8">
                                                <MudText>Address : @patient.Address</MudText>
                                            </MudItem>
                                        </MudGrid>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                             </MudItem>
                        }
                        <MudItem md="12">
                            <TelerikGrid Data=@oPDBillServices EditMode="@GridEditMode.Inline"
                                            Height="300px" Pageable="true" PageSize="5"
                                            OnDelete=@DeleteItem OnCreate=@CreateItem>
                                <GridToolBar>
                                    <GridCommandButton Command="Add">Add Service</GridCommandButton>
                                </GridToolBar>
                                <GridColumns>
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.ServiceName) Title="Service Name" Editable="true" Width="30vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                        <EditorTemplate>
                                            @{
                                                var ServiceToEdit = context as OPDBillServiceViewModel;
                                                //<TelerikComboBox @bind-Value="@ServiceToEdit.ServiceId"
                                                //             Data="@services"
                                                //             Placeholder="Select Service"
                                                //             TextField="@nameof(ServiceViewModel.Name)"
                                                //             ValueField="@nameof(ServiceViewModel.Id)"
                                                //             Filterable="true"
                                                //             Id="service">
                                                //</TelerikComboBox>

                                                <TelerikMultiColumnComboBox Data="@services"
                                                                        TextField="@nameof(ServiceViewModel.Name)"
                                                                        ValueField="@nameof(ServiceViewModel.Id)"
                                                                            Filterable="true"
                                                                            @bind-Value="@ServiceToEdit.ServiceId"
                                                                            Id="patient"
                                                                            ListHeight="250px"
                                                                            Placeholder="Hint: You can filter by the Service Name">
                                                    <MultiColumnComboBoxColumns>
                                                        <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.Name)" Title="Name" Width="200px" />
                                                        <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.DepartmentName)" Title="Department Name" Width="150px" />
                                                        <MultiColumnComboBoxColumn Field="@nameof(ServiceViewModel.OPDRate)" Title="OPD Rate" Width="150px" />
                                                    </MultiColumnComboBoxColumns>
                                                    <FooterTemplate>
                                                        <span class="combobox-footer k-display-flex k-align-items-center k-justify-content-center">
                                                            Total: @services.Count() records
                                                        </span>
                                                    </FooterTemplate>
                                                </TelerikMultiColumnComboBox>

                                                <TelerikValidationMessage For="@(() => ServiceToEdit.ServiceId)" />
                                            }
                                        </EditorTemplate>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.Quantity) Title="QTY" Editable="true" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                        <EditorTemplate>
                                            @{
                                                var ServiceToEdit = context as OPDBillServiceViewModel;
                                                
                                                <TelerikNumericTextBox Placeholder="Quantity"
                                                                       @bind-Value="@ServiceToEdit.Quantity"
                                                                       Decimals="0"></TelerikNumericTextBox>
                                                <TelerikValidationMessage For="@(() => ServiceToEdit.Quantity)" />
                                            }
                                        </EditorTemplate>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.Rate) Title="Rate" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.Discount) Title="Dis" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.StaffName) Title="Staff Name" Editable="true" Width="20vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center">
                                        <EditorTemplate>
                                            @{
                                                var ServiceToEdit = context as OPDBillServiceViewModel;
                                                <TelerikComboBox @bind-Value="@ServiceToEdit.StaffId"
                                                             Data="@staffs"
                                                             Placeholder="Select Staff"
                                                             TextField="@nameof(StaffViewModel.Name)"
                                                             ValueField="@nameof(StaffViewModel.Id)"
                                                             Filterable="true"
                                                             Id="staff">
                                                </TelerikComboBox>
                                                <TelerikValidationMessage For="@(() => ServiceToEdit.StaffId)" />
                                            }
                                        </EditorTemplate>
                                    </GridColumn>
                                    <GridColumn Field=@nameof(OPDBillServiceViewModel.Amount) Title="Amount" Editable="false" Width="10vw" TextAlign="ColumnTextAlign.Center" HeaderClass="k-text-center" DisplayFormat="@currencySetting.CurrencyGridCellFormat" />
                                    <GridCommandColumn Title="Action" Width="10vw" HeaderClass="k-text-center">

                                        <GridCommandButton Command="Delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Delete</GridCommandButton>
                                        <GridCommandButton Command="Save" ThemeColor="@ThemeConstants.Button.ThemeColor.Tertiary" ShowInEdit="true">Update</GridCommandButton>
                                        <GridCommandButton Command="Cancel" ShowInEdit="true">Cancel</GridCommandButton>
                                    </GridCommandColumn>
                                </GridColumns>
                            </TelerikGrid>
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Payment Type" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikComboBox Value="@oPDBill.PaymentTypeId"
                                                     ValueExpression="@( () => oPDBill.PaymentTypeId )"
                                                     Data="@paymentTypes"
                                                     Placeholder="Select Payment Type"
                                                     TextField="@nameof(BasicInformationViewModel.Name)"
                                                     ValueField="@nameof(BasicInformationViewModel.Id)"
                                                     Filterable="true"
                                                     Id="paymentType"
                                                     ValueChanged="@( (int p) => PaymentTypeChanged(p) )">
                                    </TelerikComboBox>
                                </div>
                            </TelerikFloatingLabel>
                            <TelerikValidationMessage For="@(() => oPDBill.PaymentTypeId)" />
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Total Amount" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikNumericTextBox Placeholder="Total Amount"
                                                            @bind-Value="@oPDBill.TotalAmount"
                                                            Format="@currencySetting.CurrencyTextBoxFormat"
                                                            Decimals="0"></TelerikNumericTextBox>
                                </div>
                            </TelerikFloatingLabel>
                            <TelerikValidationMessage For="@(() => oPDBill.TotalAmount)" />
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Total Discount" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikNumericTextBox Placeholder="Total Discount"
                                                           @bind-Value="@totalDiscount"
                                                           Format="@currencySetting.CurrencyTextBoxFormat"
                                                           Decimals="0"></TelerikNumericTextBox>
                                </div>
                            </TelerikFloatingLabel>
                        </MudItem>
                        <MudItem md="6">
                            <TelerikFloatingLabel Text="Payable Amount" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikNumericTextBox Placeholder="Payable Amount"
                                                            @bind-Value="@oPDBill.PayableAmount"
                                                           Format="@currencySetting.CurrencyTextBoxFormat"
                                                            Decimals="0"></TelerikNumericTextBox>
                                </div>
                            </TelerikFloatingLabel>
                        </MudItem>
                        @if (oPDBill.PaymentTypeStrCode == "Credit")
                        {
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Paid Amount" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikNumericTextBox Placeholder="Paid Amount"
                                                               @bind-Value="@oPDBill.PaidAmount"
                                                               Format="@currencySetting.CurrencyTextBoxFormat"
                                                               Decimals="0"></TelerikNumericTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Debt Amount" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikNumericTextBox Placeholder="Debt Amount"
                                                           @bind-Value="@oPDBill.DebtAmount"
                                                           Format="@currencySetting.CurrencyTextBoxFormat"
                                                           Decimals="0"
                                                           Enabled="false"></TelerikNumericTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                            </MudItem>
                        }
                        <MudItem md="12" Class="mb-2">
                            <TelerikFloatingLabel Text="Description" Class="custom-label w-100">
                                <div class="k-form-field-wrap">
                                    <TelerikTextBox Placeholder="Description"
                                                    @bind-Value="@oPDBill.Description"></TelerikTextBox>
                                </div>
                            </TelerikFloatingLabel>
                        </MudItem>
                    </MudGrid>
                        
                </FormItems>
                <FormButtons>
                    <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveOPDBill">Save</MudButton>

                    <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveAndPrintOPDBill">Save/Print</MudButton>

                    <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" Disabled="@(oPDBill.Id==0)" OnClick="Print">Print</MudButton>

                    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="OPDBills">Return</MudButton>
                </FormButtons>
            </TelerikForm>
            
        </MudPaper>
    </MudItem>
</MudGrid>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@addPatientWindowState Modal="true">
    <WindowTitle>
        <strong>Add Patient</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <PatientDefine Id="0" Mode="Modal" OnPatientAdded="PatientAdded"></PatientDefine>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="80vw" Height="80vh" Centered="true" @bind-Visible=@searchPatientWindowState Modal="true">
    <WindowTitle>
        <strong>Search Patient</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <Patients Mode="Search" OnPatientSelected="PatientSelected"></Patients>
    </WindowContent>
</TelerikWindow>

<TelerikWindow Class="demo-window" Width="40vw" Height="70vh" Centered="true" @bind-Visible=@selectReportTemplate Modal="true">
    <WindowTitle>
        <strong>Select Report Template</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <ReportTemplatesSelect Id="@oPDBill.Id" ReportCode="OPD"></ReportTemplatesSelect>
    </WindowContent>
</TelerikWindow>

@code {
    [Parameter]
    public int? Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    [CascadingParameter]
    public CurrencySetting currencySetting { get; set; }

    private string caption = "Add OPD Bill";
    private OPDBillViewModel oPDBill = new OPDBillViewModel();
    private PatientViewModel patient = new PatientViewModel();
    private List<PatientViewModel> patients;
    private List<BasicInformationViewModel> paymentTypes;
    private List<ServiceViewModel> services;
    private List<StaffViewModel> staffs;
    private List<OPDBillServiceViewModel> oPDBillServices = new List<OPDBillServiceViewModel>();
    private SettingViewModel patientIdPrefix;
    private SettingViewModel receiptNoPrefix;

    private bool success;
    TelerikForm form; 
    private int totalDiscount = 0;
    private bool addPatientWindowState = false;
    private bool searchPatientWindowState = false;
    private bool selectReportTemplate = false;




    protected override async Task OnInitializedAsync()
    {

        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        receiptNoPrefix = await mediator.Send(new GetSettingByKeyQuery("OPDReceiptNoPrefix"));
        patients = await mediator.Send(new GetAllPatientsQuery());
        services = await mediator.Send(new GetAllServicesQuery());
        staffs = await mediator.Send(new GetAllStaffsQuery());
        paymentTypes = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("PaymentType"));

        oPDBill.Date = DateTime.Now;

        if (Id > 0)
        {
            caption = "Edit OPD Bill";

            oPDBill = await mediator.Send(new GetOPDBillByIdQuery(Convert.ToInt32(Id)));

            if (oPDBill != null)
            {

                oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));
                patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));

                PaymentTypeChanged(oPDBill.PaymentTypeId);

                foreach (var billService in oPDBillServices)
                {
                    var service = await mediator.Send(new GetServiceByIdQuery(billService.ServiceId ?? 0));

                    if (service != null)
                    {
                        billService.ServiceCode = service.Code;
                        billService.ServiceName = service.Name;
                        billService.Rate = service.OPDRate;
                        if (service.DiscountAmount > 0)
                            billService.Discount = service.DiscountAmount;

                        if (service.DiscountPercentage > 0)
                            billService.Discount = (service.OPDRate * service.DiscountPercentage) / 100;

                        billService.Amount = billService.Quantity * (billService.Rate - billService.Discount);
                    }

                    var staff = await mediator.Send(new GetStaffByIdQuery(billService.StaffId ?? 0));

                    if (staff != null)
                    {
                        billService.StaffCode = staff.Code;
                        billService.StaffName = staff.Name;
                    }


                    CalculateAmount();

                }
            }
        }


    }

    public bool ValidSubmit { get; set; } = false;

    async void HandleValidSubmit()
    {
        ValidSubmit = true;

        await Task.Delay(2000);

        ValidSubmit = false;

        StateHasChanged();
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    private async void CreateItem(GridCommandEventArgs args)
    {
        OPDBillServiceViewModel billService = (OPDBillServiceViewModel)args.Item;

        var service = await mediator.Send(new GetServiceByIdQuery(billService.ServiceId??0));

        if (service != null)
        {
            billService.ServiceCode = service.Code;
            billService.ServiceName=service.Name;
            billService.Rate = service.OPDRate;
            if (service.DiscountAmount > 0)
                billService.Discount = service.DiscountAmount;

            if (service.DiscountPercentage > 0)
                billService.Discount = (service.OPDRate * service.DiscountPercentage) / 100;

            billService.Amount = billService.Quantity * (billService.Rate - billService.Discount);
        }

        var staff= await mediator.Send(new GetStaffByIdQuery(billService.StaffId??0));

        if (staff != null)
        {
            billService.StaffCode=staff.Code;
            billService.StaffName = staff.Name;
        }

        oPDBillServices.Add(billService);

        CalculateAmount();
        //ProductService.CreateProduct((ProductDto)args.Item);
        //LoadData();
    }

    private void DeleteItem(GridCommandEventArgs args)
    {

        OPDBillServiceViewModel billService = (OPDBillServiceViewModel)args.Item;

        oPDBillServices.Remove(billService);

        CalculateAmount();
        //ProductService.DeleteProduct((ProductDto)args.Item);
        //LoadData();
    }

    private async void CalculateAmount()
    {
        var total = oPDBillServices.Sum(b => b.Rate * b.Quantity);
        var payable = oPDBillServices.Sum(b => b.Amount);

        oPDBill.TotalAmount=total;
        oPDBill.PayableAmount = payable;
        totalDiscount = total - payable;
    }



    protected async Task NewPatient()
    {
        addPatientWindowState = true;


    }

    protected async Task PatientAdded(int PatientId)
    {
        patients = await mediator.Send(new GetAllPatientsQuery());
        oPDBill.PatientId = PatientId;

        patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));

        addPatientWindowState = false;
    }

    protected async Task SearchPatient()
    {
        searchPatientWindowState = true;

    }

    protected async Task PatientSelected(int PatientId)
    {
        oPDBill.PatientId = PatientId;

        patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));

        searchPatientWindowState = false;
    }

    protected async Task PatientChanged(int PatientId)
    {
        oPDBill.PatientId = PatientId;
        patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));
    }

    protected async Task PaymentTypeChanged(int PaymentTypeId)
    {
        oPDBill.PaymentTypeId = PaymentTypeId;
        var paymentType = await mediator.Send(new GetBasicInformationByIdQuery(PaymentTypeId));
        oPDBill.PaymentTypeStrCode = paymentType.StrCode;

        if (oPDBill.PaymentTypeStrCode=="Cash")
        {
            oPDBill.PaidAmount=oPDBill.PayableAmount;
            oPDBill.DebtAmount = 0;
        }
        else
        {
            oPDBill.PaidAmount = 0;
            oPDBill.DebtAmount = oPDBill.PayableAmount-(oPDBill.PaidAmount??0 + oPDBill.OPDBillPayments.Sum(p => p.Amount));
        }
    }

    //protected async Task DateOfBirthChange()
    //{
    //    if (oPDBill.Patient.DateOfBirth != null)
    //    {
    //        DateTime dateOfBirth = oPDBill.Patient.DateOfBirth ?? DateTime.Now;
    //        TimeSpan span = DateTime.Now - dateOfBirth;
    //        DateTime age = DateTime.MinValue + span;

    //        // Make adjustment due to MinValue equalling 1/1/1
    //        int years = age.Year - 1;
    //        int months = age.Month - 1;
    //        int days = age.Day - 1;

    //        patientAge = String.Format("{0} Years, {1} Months, {2} Days", years, months, days);
    //    }
    //    else
    //    {
    //        patientAge = "Unknown";
    //    }

    //}

    protected async Task SaveOPDBill()
    {

        if (form.IsValid())
        {

            CommandResponse result=new CommandResponse()
            {
                Id=oPDBill.Id,
                ResultType=ResultType.None,
                ResultMessage=""
            };


            if (oPDBill.Id > 0)
            {
                try
                {
                    oPDBill.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            oPDBill.Id = result.Id;

                            SaveServices();




                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected OPDBill", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    oPDBill.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateOPDBillCommand>(oPDBill);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        oPDBill.Id = result.Id;

                        SaveServices();

                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }

            if (result.ResultType == ResultType.Success)
            {
                navManager.NavigateTo("OPDBills");
            }
        }

    }

    protected async Task SaveAndPrintOPDBill()
    {
        if (form.IsValid())
        {

            CommandResponse result = new CommandResponse()
                {
                    Id = oPDBill.Id,
                    ResultType = ResultType.None,
                    ResultMessage = ""
                };


            if (oPDBill.Id > 0)
            {
                try
                {
                    oPDBill.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            oPDBill.Id = result.Id;

                            SaveServices();




                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected OPDBill", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    oPDBill.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateOPDBillCommand>(oPDBill);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        oPDBill.Id = result.Id;

                        SaveServices();

                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }

            if (result.ResultType == ResultType.Success)
            {
                Print();
            }
        }
    }

    protected async Task SaveServices()
    {
        var billServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));

        foreach (var service in oPDBillServices)
        {
            service.OPDBillId = oPDBill.Id;
            if (billServices.Exists(b => b.ServiceId == service.Id))
            {


                var editCommand = MapperConfig.Mapper.Map<EditOPDBillServiceCommand>(service);

                await mediator.Send(editCommand);
            }
            else
            {
                var addCommand = MapperConfig.Mapper.Map<CreateOPDBillServiceCommand>(service);

                await mediator.Send(addCommand);
            }
        }

        foreach (var billService in billServices)
        {
            if (!oPDBillServices.Exists(b => b.ServiceId == billService.ServiceId))
            {
                await mediator.Send(new DeleteOPDBillServiceCommand(billService.Id));
            }

        }


    }

    protected async Task Print()
    {
        selectReportTemplate = true;

    }
    
}

