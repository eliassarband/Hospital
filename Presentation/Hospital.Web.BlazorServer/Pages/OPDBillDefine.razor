@page "/OPDBillDefine/{Id}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>@caption</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="6">
                                <MudDatePicker Label="Date of Joining" @bind-Date="@oPDBill.Date" TitleDateFormat="dddd, dd MMMM" Variant="Variant.Outlined" Required="true" RequiredError="Please Select Date" />
                            </MudItem>
                            <MudItem md="6">
                                <MudSelect Class="mt-1" T="int" Label="Patient" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Patient" @bind-value="@oPDBill.PatientId" @bind-Text="@oPDBill.PatientName" Clearable>
                                    @foreach (var p in patients)
                                    {
                                        <MudSelectItem T="int" Value="@p.Id">@p.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem md="12">
                                <MudSimpleTable Hover="true" FixedHeader="true" FixedFooter="true" Striped="true" Breakpoint="Breakpoint.Sm" Class="" LoadingProgressColor="Color.Info">
                                    <MudTHeadRow>
                                        <MudTh>Service</MudTh>
                                        <MudTh>Quantity</MudTh>
                                        <MudTh>Consultant</MudTh>
                                        <MudTh>Rate</MudTh>
                                        <MudTh>Discount</MudTh>
                                        <MudTh>Amount</MudTh>
                                        <MudTh>Action</MudTh>
                                    </MudTHeadRow>
                                    <Row>
                                        <MudTd DataLabel="Service">
                                            <MudSelect Class="mt-1" T="int" Label="Service"         Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Service" Clearable @bind-Value="@newServiceId" @bind-Text="@newServiceName">
                                        @foreach (var p in services)
                                        {
                                            <MudSelectItem T="int" Value="@p.Id">@p.Name</MudSelectItem>
                                        }
                                            </MudSelect>
                                        </MudTd>
                                        <MudTd DataLabel="Quantity">
                                            <MudNumericField T="int" Class="mt-1" Label="Quantity" Placeholder="Quantity" Variant="Variant.Outlined" Clearable @bind-Value="@newQunatity"></MudNumericField>
                                        </MudTd>
                                        <MudTd DataLabel="Consultant">
                                            <MudSelect Class="mt-1" T="int" Label="Consultant" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Consultant" Clearable @bind-Value="@newStaffId" @bind-Text="@newStaffName">
                                                @foreach (var p in staffs)
                                                {
                                                    <MudSelectItem T="int" Value="@p.Id">@p.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudTd>
                                        <MudTd DataLabel="Rate">
                                            <MudNumericField T="int" Class="mt-1" Label="Rate" Placeholder="Rate" Variant="Variant.Outlined" Clearable @bind-Value="@newRate"></MudNumericField>
                                        </MudTd>
                                        <MudTd DataLabel="Discount">
                                            <MudNumericField T="int" Class="mt-1" Label="Discount" Placeholder="Discount" Variant="Variant.Outlined" Clearable @bind-Value="@newDiscount"></MudNumericField>
                                        </MudTd>
                                        <MudTd DataLabel="Amount"><MudNumericField T="int" Class="mt-1" Label="Amount" Placeholder="Amount" Variant="Variant.Outlined" Clearable @bind-Value="@newAmount"></MudNumericField></MudTd>
                                        <MudTd DataLabel="Add">
                                            <MudIconButton ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Add" Color="Color.Secondary" OnClick="@(()=> AddService())"></MudIconButton>
                                        </MudTd>
                                    </Row>
                                    @if (oPDBillServices != null)
                                    {
                                        foreach (var service in oPDBillServices)
                                        {
                                            <Row>
                                                <MudTd DataLabel="Service">
                                                    @service.ServiceName
                                                </MudTd>
                                                <MudTd DataLabel="Quantity">
                                                    @service.Quantity
                                                </MudTd>
                                                <MudTd DataLabel="Consultant">
                                                    @service.StaffName
                                                </MudTd>
                                                <MudTd DataLabel="Rate">
                                                    @service.Rate
                                                </MudTd>
                                                <MudTd DataLabel="Discount">
                                                    @service.Discount
                                                </MudTd>
                                                <MudTd DataLabel="Amount">
                                                    @service.Amount
                                                </MudTd>
                                                <MudTd DataLabel="Delete">
                                                    <MudIconButton ButtonType="ButtonType.Button" Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(()=> DeleteService(service.Id))"></MudIconButton>
                                                </MudTd>   
                                            </Row>
                                        }
                                    }

                                </MudSimpleTable>
                            </MudItem>
                            <MudItem md="12">
                                
                            </MudItem>
                            <MudItem md="12">
                                
                            </MudItem>
                            <MudItem md="12">
                                
                            </MudItem>
                            <MudItem md="12">
                                
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Class="mr-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveOPDBill" Disabled="@(!success)">Save</MudButton>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="OPDBills">Return</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string caption = "Add OPD Bill";
    private OPDBillViewModel oPDBill = new OPDBillViewModel();
    private List<PatientViewModel> patients;
    private List<ServiceViewModel> services;
    private List<StaffViewModel> staffs;
    private List<OPDBillServiceViewModel> oPDBillServices = new List<OPDBillServiceViewModel>();
    bool success;
    MudForm form;

    private int newServiceId;
    private string newServiceName;
    private int newQunatity;
    private int newStaffId;
    private string newStaffName;
    private int newRate;
    private int newDiscount;
    private int newAmount;


    protected override async Task OnInitializedAsync()
    {
        patients = await mediator.Send(new GetAllPatientsQuery());
        services = await mediator.Send(new GetAllServicesQuery());
        staffs = await mediator.Send(new GetAllStaffsQuery());

        if (!String.IsNullOrEmpty(Id))
        {
            if (Convert.ToInt32(Id) > 0)
            {
                caption = "Edit OPDBill";

                oPDBill = await mediator.Send(new GetOPDBillByIdQuery(Convert.ToInt32(Id)));

                if (oPDBill != null)
                {
                    oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));
                }
            }
        }

    }

    protected async Task AddService()
    {
            oPDBillServices.Add(new OPDBillServiceViewModel()
            {
                ServiceId = newServiceId,
                ServiceName = newServiceName,
                Quantity = newQunatity,
                StaffId = newStaffId,
                StaffName = newStaffName,
                Rate = newRate,
                Discount = newDiscount,
                Amount = newAmount
            });

        newServiceId = 0;
        newServiceName = "";
        newQunatity = 0;
        newStaffId = 0;
        newStaffName = "";
        newRate = 0;
        newDiscount = 0;
        newAmount = 0;
    }

    protected async Task DeleteService(int Id)
    {
        //bool? dialogResult = await DialogService.ShowMessageBox(
        //    "Delete Service",
        //    "Are you sure?",
        //    yesText: "Delete!", cancelText: "No");

        //if (dialogResult == true)
        //{
        //    loading = true;
        //    try
        //    {
        //        CommandResponse result;

        //        result = await mediator.Send(new DeleteServiceCommand(Id));

        //        if (result.ResultType == ResultType.Success)
        //        {
        //            Elements = await mediator.Send(new GetAllServicesQuery());
        //            Snackbar.Add(result.ResultMessage, Severity.Success);
        //        }
        //        else if (result.ResultType == ResultType.Warning)
        //        {
        //            Snackbar.Add(result.ResultMessage, Severity.Warning);
        //        }
        //        else if (result.ResultType == ResultType.Error)
        //        {
        //            Snackbar.Add(result.ResultMessage, Severity.Error);
        //        }



        //    }
        //    catch (Exception exp)
        //    {
        //        Snackbar.Add(exp.Message, Severity.Error);
        //    }
        //    loading = false;

        //}


    }

    protected async Task SaveOPDBill()
    {
        form.Validate();

        if (form.IsValid)
        {
            CommandResponse result;


            if (oPDBill.Id > 0)
            {
                try
                {
                    oPDBill.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            navManager.NavigateTo("OPDBills");
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected OPDBill", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    oPDBill.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateOPDBillCommand>(oPDBill);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        navManager.NavigateTo("OPDBills");
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

