@page "/ServiceDefine/{Id:int}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using Hospital.Web.BlazorServer.Models;
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IHttpContextAccessor accessor

@attribute [Authorize(Roles = "Super,Admin")]

<PageTitle>Service Define - HMIS System</PageTitle>

<MudGrid Class="mt-2">
    <MudItem md="2"></MudItem>
    <MudItem md="8">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>@caption</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="6">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@service.Code" Required="true" RequiredError="Please Enter Code" MaxLength="100" Label="Code" Placeholder="Service Code" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="6">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@service.Name" Required="true" RequiredError="Please Enter Name" MaxLength="200" Label="Name" Placeholder="Service Name" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudSelect Class="mt-1" T="int" Label="Department" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Department" @bind-value="@service.DepartmentId" @bind-Text="@service.DepartmentName" Clearable>
                                    @foreach (var d in departments)
                                    {
                                        <MudSelectItem T="int" Value="@d.Id">@d.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.OPDRate" Label="OPD Rate" Placeholder="OPD Rate" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.IPDRate" Label="IPD Rate" Placeholder="IPD Rate" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.AddPercentage" Label="Add Percentage" Placeholder="Add Percentage" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.AddAmount" Label="Add Amount" Placeholder="Add Amount" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.DiscountPercentage" Label="Discount Percentage" Placeholder="Discount Percentage" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.DiscountAmount" Label="Discount Amount" Placeholder="Discount Amount" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-1" @bind-Value="@service.Remark" Label="Remark" Placeholder="Remark" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="6">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@service.Cost" Label="Cost" Placeholder="Cost" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                            <MudItem md="6">
                                <MudSwitch T="bool" Class="mt-1" @bind-Checked="@service.NotInUse" Label="Not In Use" Color="Color.Success" UnCheckedColor="Color.Dark"></MudSwitch>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        @if (saveAccess)
                        {
                            <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveService" Disabled="@(!success)">Save</MudButton>
                        }
                        <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="Services">Return</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem md="2"></MudItem>
</MudGrid>


@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    [CascadingParameter]
    public CurrencySetting currencySetting { get; set; }

    private string caption = "Add Service";
    private ServiceViewModel service = new ServiceViewModel();
    private List<DepartmentViewModel> departments;
    bool success;
    MudForm form;

    private bool saveAccess = false;

    protected override async Task OnInitializedAsync()
    {
        if(currencySetting ==null)
        {
            SettingHelper settingHelper = new SettingHelper(mediator);
            currencySetting = await settingHelper.GetCurrencySetting();
        }

        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("ServiceDefine", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/ServiceDefine/View");
        }
        saveAccess = await mediator.Send(new CheckUserActionAccessQuery("ServiceDefine", "Save", userInfo.UserId));

        departments = await mediator.Send(new GetAllDepartmentsQuery());
        
        if (Id > 0)
        {
            caption = "Edit Service";

            service = await mediator.Send(new GetServiceByIdQuery(Convert.ToInt32(Id)));

            if (service != null)
            {

            }
        }
        

    }

    protected async Task SaveService()
    {
        form.Validate();

        if (form.IsValid)
        {
            CommandResponse result;


            if (service.Id > 0)
            {
                try
                {
                    service.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditServiceCommand>(service);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            navManager.NavigateTo("Services");
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected Service", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    service.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateServiceCommand>(service);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        navManager.NavigateTo("Services");
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

