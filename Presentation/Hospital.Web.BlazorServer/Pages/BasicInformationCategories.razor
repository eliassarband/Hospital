@page "/BasicInformationCategories"
@using Hospital.Application.Commands
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth;
@using MediatR
@inject IMediator mediator;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager navManager
@inject IHttpContextAccessor accessor

@attribute [Authorize(Roles = "Super")]

<PageTitle>Basic Information Category List - HMIS System</PageTitle>

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudCard Class="pl-2 pr-2 mt-2">
                <MudCardHeader>Basic Information Category List</MudCardHeader>
                <MudCardActions>
                    @if(addAccess)
                    {
                        <MudButton ButtonType="MudBlazor.ButtonType.Button" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href=@String.Format("BasicInformationCategoryDefine/0")>Add Category</MudButton>
                    }
                </MudCardActions>
                <MudCardContent>
                    <MudTable @ref="@_table" Items="@Elements" RowsPerPage="5" Hover="true" FixedHeader="true" FixedFooter="true" Striped="true" Breakpoint="Breakpoint.Sm" Class="" Loading="@loading" LoadingProgressColor="Color.Info" Filter="new Func<BasicInformationCategoryViewModel,bool>(FilterCategoryInit)">
                        <ToolBarContent>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Code</MudTh>
                            <MudTh>Name</MudTh>
                            <MudTh>Viewable</MudTh>
                            <MudTh>Related Category</MudTh>
                            @if (editAccess)
                            {
                                <MudTh>Edit</MudTh>
                            }
                            @if (deleteAccess)
                            {
                                <MudTh>Delete</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Code">@context.Code</MudTd>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Viewable">
                                @if (context.Viewable)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Done" Color="Color.Success" Title="Active"></MudIcon>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error" Title="Inactive"></MudIcon>
                                }
                            </MudTd>
                            <MudTd DataLabel="RelatedCategory">@context.RelatedCategory?.Name</MudTd>
                            @if(editAccess)
                            {
                                <MudTd DataLabel="Edit">
                                
                                    <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href=@String.Format("BasicInformationCategoryDefine/{0}",context.Id)></MudIconButton>
                                
                                </MudTd>
                            }
                            @if (deleteAccess)
                            {
                                <MudTd DataLabel="Delete">

                                    <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(()=> DeleteBasicInformationCategory(@context.Id))"></MudIconButton>
                                
                                </MudTd>
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
                
            </MudCard>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private MudTable<BasicInformationCategoryViewModel> _table;
    private List<BasicInformationCategoryViewModel> Elements;
    private bool loading = false;
    private string searchString = "";

    private bool addAccess = false;
    private bool editAccess = false;
    private bool deleteAccess = false;


    protected override async Task OnInitializedAsync()
    {
        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if(!(await mediator.Send(new CheckUserActionAccessQuery("BasicInformationCategories","View",userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/BasicInformationCategories/View");
        }
        addAccess = await mediator.Send(new CheckUserActionAccessQuery("BasicInformationCategories", "Add", userInfo.UserId));
        editAccess = await mediator.Send(new CheckUserActionAccessQuery("BasicInformationCategories", "Edit", userInfo.UserId));
        deleteAccess = await mediator.Send(new CheckUserActionAccessQuery("BasicInformationCategories", "Delete", userInfo.UserId));

        Elements = await mediator.Send(new GetAllBasicInformationCategoriesQuery());

    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterCategoryInit(BasicInformationCategoryViewModel element) => FilterCategory(element, searchString);

    private bool FilterCategory(BasicInformationCategoryViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.RelatedCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Code} {element.Name} {element.RelatedCategoryName}".Contains(searchString))
            return true;
        return false;
    }

    protected async Task DeleteBasicInformationCategory(int Id)
    {

        bool? dialogResult = await DialogService.ShowMessageBox(
            "Delete Category",
            "Are You Sure?",
            yesText: "Delete!", cancelText: "No");

        if (dialogResult == true)
        {
            loading = true;
            try
            {
                CommandResponse result;

                result = await mediator.Send(new DeleteBasicInformationCategoryCommand(Id));

                if (result.ResultType == ResultType.Success)
                {
                    Elements = await mediator.Send(new GetAllBasicInformationCategoriesQuery());
                    Snackbar.Add(result.ResultMessage, Severity.Success);
                }
                else if (result.ResultType == ResultType.Warning)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Warning);
                }
                else if (result.ResultType == ResultType.Error)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Error);
                }



            }
            catch (Exception exp)
            {
                Snackbar.Add(exp.Message, Severity.Error);
            }
            loading = false;

        }


    }


}