@page "/DebtorOPDBills"
@using Hospital.Application.Commands
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using MediatR
@inject IMediator mediator;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudCard Class="pl-2 pr-2 mt-2">
                <MudCardHeader>Debtor OPD Bills</MudCardHeader>
                <MudCardActions>
                    
                </MudCardActions>
                <MudCardContent>
                    <MudTable @ref="@_table" Items="@Elements" RowsPerPage="5" Hover="true" FixedHeader="true" FixedFooter="true" Striped="true" Breakpoint="Breakpoint.Sm" Class="" Loading="@loading" LoadingProgressColor="Color.Info" Filter="new Func<OPDBillViewModel,bool>(FilterOPDBillInit)">
                        <ToolBarContent>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Receipt No</MudTh>
                            <MudTh>Patient Id</MudTh>
                            <MudTh>Patient</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Payment Type</MudTh>
                            <MudTh>Total Amount</MudTh>
                            <MudTh>Payable Amount</MudTh>
                            <MudTh>Paid Amount</MudTh>
                            <MudTh>Debt Amount</MudTh>
                            <MudTh>Payment</MudTh>
                            
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="ReceiptNo">
                                @UtilityHelper.GenerateIdentifier(receiptNoPrefix.Value,context.Id)
                            </MudTd>
                            <MudTd DataLabel="PatientId">
                                @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,context.PatientId)
                            </MudTd>
                            <MudTd DataLabel="Patient">@context.PatientName</MudTd>
                            <MudTd DataLabel="Date">@context.Date</MudTd>
                            <MudTd DataLabel="PaymentType">@context.PaymentTypeName</MudTd>
                            <MudTd DataLabel="TotalAmount">@context.TotalAmount</MudTd>
                            <MudTd DataLabel="PayableAmount">@context.PayableAmount</MudTd>
                            <MudTd DataLabel="PaidAmount">@(context.PaidAmount + context.OPDBillPayments.Sum(p => p.Amount))</MudTd>
                            <MudTd DataLabel="DebtAmount">@context.DebtAmount</MudTd>
                            <MudTd DataLabel="Payment">
                                @if (context.DebtAmount > 0)
                                {
                                    <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Payment" Color="Color.Tertiary" OnClick="@(()=> OPDPayment(@context.Id))"></MudIconButton>
                                }
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudPaper>
    </MudItem>
</MudGrid>

<TelerikWindow Class="demo-window" Width="60vw" Height="70vh" Centered="true" @bind-Visible=@showPayments Modal="true">
    <WindowTitle>
        <strong>OPD Balance Payment</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <OPDBillPayments OPDId="@OPDId" OnPaymentAdded="PaymentAdded"></OPDBillPayments>
    </WindowContent>
</TelerikWindow>

@code {


    private MudTable<OPDBillViewModel> _table;
    private List<OPDBillViewModel> Elements;
    private SettingViewModel patientIdPrefix;
    private SettingViewModel receiptNoPrefix;

    private bool loading = false;
    private string searchString = "";
    private bool showPayments = false;
    private int OPDId = 0;


    protected override async Task OnInitializedAsync()
    {
        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        receiptNoPrefix = await mediator.Send(new GetSettingByKeyQuery("OPDReceiptNoPrefix"));

        Elements = await mediator.Send(new GetAllOPDBillsQuery());

        Elements = Elements.Where(d => d.DebtAmount > 0).ToList();
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterOPDBillInit(OPDBillViewModel element) => FilterOPDBill(element, searchString);

    private bool FilterOPDBill(OPDBillViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PatientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PaymentTypeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Date.ToString()} {element.PatientName} {element.PaymentTypeName}".Contains(searchString))
            return true;
        return false;
    }

    protected async Task OPDPayment(int OPDBillId)
    {
        OPDId = OPDBillId;
        showPayments = true;
    }

    protected async Task PaymentAdded(int OPDBillId)
    {
        Elements = await mediator.Send(new GetAllOPDBillsQuery());

        Elements = Elements.Where(d => d.DebtAmount > 0).ToList();
    }


}
