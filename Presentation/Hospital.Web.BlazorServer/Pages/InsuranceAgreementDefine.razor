@page "/InsuranceAgreementDefine/{Id:int}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IHttpContextAccessor accessor

@attribute [Authorize]

<PageTitle>Insurance Agreement Define - HMIS System</PageTitle>

<MudGrid Class="mt-2">
    <MudItem md="3"></MudItem>
    <MudItem md="6">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>@caption</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="12">
                                <MudSelect Class="mt-1" T="int" Label="Insurance" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Placeholder="Insurance" @bind-value="@insuranceAgreement.InsuranceId" @bind-Text="@insuranceAgreement.InsuranceName" Clearable>
                                    @foreach (var i in insurances)
                                    {
                                        <MudSelectItem T="int" Value="@i.Id">@i.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem md="12">
                                <MudDatePicker Label="Date" @bind-Date="@insuranceAgreement.Date" TitleDateFormat="dddd, dd MMMM" Variant="Variant.Outlined" Required="true" RequiredError="Please Select Date" />
                            </MudItem>
                            <MudItem md="12">
                                <MudDatePicker Label="To Date" @bind-Date="@insuranceAgreement.ToDate" TitleDateFormat="dddd, dd MMMM" Variant="Variant.Outlined" Required="true" RequiredError="Please Select To Date" />
                            </MudItem>
                            <MudItem md="4">
                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                                    <ButtonTemplate>
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Filled.CloudUpload"
                                                   for="@context">
                                            Upload Agreement Detail File
                                        </MudButton>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudItem>
                            <MudItem md="8">
                                <MudText>@attachmentFiles</MudText>

                            </MudItem>
                            <MudItem md="12">
                                <MudNumericField T="int" Class="mt-1" @bind-Value="@insuranceAgreement.ShowWarningBefore" Label="Show Warning Before(Days)" Placeholder="Show Warning Before(Days)" Required="true" RequiredError="Please Enter Show Warning Before" Variant="Variant.Outlined" Clearable></MudNumericField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        @if (saveAccess)
                        {
                            <MudButton Class="mr-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveInsuranceAgreement" Disabled="@(!success)">Save</MudButton>
                        }
                        <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="InsuranceAgreements">Return</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem md="3"></MudItem>
</MudGrid>


@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string caption = "Add Insurance Agreement";
    private InsuranceAgreementViewModel insuranceAgreement = new InsuranceAgreementViewModel();
    private List<InsuranceViewModel> insurances;
    bool success;
    MudForm form;
    private string attachmentFiles;
    private string uploadedFile;
    private string uploadedFileContentType;
    private bool attachmentChanged = false;

    private bool saveAccess = false;

    protected override async Task OnInitializedAsync()
    {
        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("InsuranceAgreementDefine", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/InsuranceAgreementDefine/View");
        }
        saveAccess = await mediator.Send(new CheckUserActionAccessQuery("InsuranceAgreementDefine", "Save", userInfo.UserId));

        insurances = await mediator.Send(new GetAllInsurancesQuery());

        
        if (Id > 0)
        {
            caption = "Edit Insurance Agreement";

            insuranceAgreement = await mediator.Send(new GetInsuranceAgreementByIdQuery(Convert.ToInt32(Id)));

            if (insuranceAgreement != null)
            {
                uploadedFile = Convert.ToBase64String(insuranceAgreement.AttachmentContent);
                uploadedFileContentType = insuranceAgreement.AttachmentContentType;
                attachmentFiles = insuranceAgreement.AttachmentFullName;
            }
        }
        

    }
    protected async Task UploadFile(IBrowserFile file)
    {
        long maxFileSize = 1024 * 1024 * 5; // 5 MB or whatever, don't just use max int

        var readStream = file.OpenReadStream(maxFileSize);

        var buf = new byte[readStream.Length];

        var ms = new MemoryStream(buf);

        await readStream.CopyToAsync(ms);

        var buffer = ms.ToArray();

        uploadedFile = Convert.ToBase64String(buffer);
        uploadedFileContentType = file.ContentType;
        insuranceAgreement.AttachmentContent = buffer;
        insuranceAgreement.AttachmentContentType = file.ContentType;
        insuranceAgreement.AttachmentFullName = file.Name;

        attachmentFiles = file.Name;

        attachmentChanged = true;

    }

    protected async Task SaveInsuranceAgreement()
    {
        form.Validate();

        if (form.IsValid)
        {
            if(attachmentChanged)
            {
                AttachmentViewModel attachment = new AttachmentViewModel()
                {
                    Name = insuranceAgreement.AttachmentFullName,
                    ContentType = insuranceAgreement.AttachmentContentType,
                    Content = insuranceAgreement.AttachmentContent,
                    Description = "Insurance Agreement Detail"
                };

                var attachmentCommand = MapperConfig.Mapper.Map<CreateAttachmentCommand>(attachment);
                CommandResponse attachmentResult = await mediator.Send(attachmentCommand);

                if (attachmentResult.ResultType == ResultType.Success)
                {
                    insuranceAgreement.AttachmentId = attachmentResult.Id;
                }
            }

            CommandResponse result;


            if (insuranceAgreement.Id > 0)
            {
                try
                {
                    insuranceAgreement.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditInsuranceAgreementCommand>(insuranceAgreement);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            navManager.NavigateTo("InsuranceAgreements");
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected InsuranceAgreement", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    insuranceAgreement.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateInsuranceAgreementCommand>(insuranceAgreement);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        navManager.NavigateTo("InsuranceAgreements");
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

