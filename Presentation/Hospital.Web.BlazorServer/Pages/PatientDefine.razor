@page "/PatientDefine/{Id}/{Mode?}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Super,Admin")]

<MudGrid Class="mt-2">
    <MudItem md="1"></MudItem>
    <MudItem md="10">
        <MudPaper Class="p-3" Elevation="10">
            <TelerikForm @ref="form" Model="@patient"
                     OnValidSubmit="@HandleValidSubmit"
                     OnInvalidSubmit="@HandleInvalidSubmit">
                <FormValidation>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    
                </FormValidation>
                <FormItems>
                    <MudGrid Spacing="1">
                        <MudItem md="12">
                            @if(patient!=null)
                            {
                                <MudText>
                                    Patient Id : @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,patient.Id)
                                </MudText>
                                
                            }
                        </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="National Id Cart" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                    <TelerikTextBox Placeholder="National Id Cart"
                                                    @bind-Value="@patient.NationalIdCart"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.NationalIdCart)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Name Prefix" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                    <TelerikComboBox @bind-Value="@patient.NamePrefixId"
                                                     Data="@namePrefixes"
                                                     Placeholder="Select Name Prefix"
                                                     TextField="@nameof(BasicInformationViewModel.Name)"
                                                     ValueField="@nameof(BasicInformationViewModel.Id)"
                                                     Filterable="true"
                                                     Id="namePrefix">
                                    </TelerikComboBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.NamePrefix)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Patient Name" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                    <TelerikTextBox Placeholder="Patient Name"
                                                        @bind-Value="@patient.Name"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Name)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Date" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikDatePicker @bind-Value="@patient.DateOfBirth"
                                                           Format="dddd, dd MMMM, yyyy"
                                                           OnChange="DateOfBirthChanged"
                                                           Id="opd-date">
                                        </TelerikDatePicker>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.DateOfBirth)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Age" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikTextBox Placeholder="Patient Age"
                                                    @bind-Value="@patientAge"
                                                    Enabled="false"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.DateOfBirth)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Gender" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikComboBox @bind-Value="@patient.GenderId"
                                                         Data="@genders"
                                                     Placeholder="Select Gender"
                                                         TextField="@nameof(BasicInformationViewModel.Name)"
                                                         ValueField="@nameof(BasicInformationViewModel.Id)"
                                                         Filterable="true"
                                                         Id="gender">
                                        </TelerikComboBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Gender)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Father Name" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikTextBox Placeholder="Father Name"
                                                    @bind-Value="@patient.FatherName"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.FatherName)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Mobile Number" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikMaskedTextBox Id="phone-input" 
                                                    @bind-Value="@patient.Mobile" 
                                                    PlaceHolder="Mobile Number"
                                                    Mask="(999) 000-0000"></TelerikMaskedTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Mobile)" />

                            </MudItem>
                             <MudItem md="6">
                                <TelerikFloatingLabel Text="Phone Number" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikMaskedTextBox Id="phone-input"
                                                          @bind-Value="@patient.Phone"
                                                          PlaceHolder="Mobile Number"
                                                    Mask="(999) 000-0000"></TelerikMaskedTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Phone)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Email Address" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikTextBox Placeholder="Email Address"
                                                    @bind-Value="@patient.Email"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Email)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="City" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikComboBox @bind-Value="@patient.CityId"
                                                         Data="@cities"
                                                         Placeholder="Select City"
                                                         TextField="@nameof(BasicInformationViewModel.Name)"
                                                         ValueField="@nameof(BasicInformationViewModel.Id)"
                                                         Filterable="true"
                                                         Id="city">
                                        </TelerikComboBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.CityId)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Area" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikComboBox @bind-Value="@patient.AreaId"
                                                         Data="@areas"
                                                         Placeholder="Select Area"
                                                         TextField="@nameof(BasicInformationViewModel.Name)"
                                                         ValueField="@nameof(BasicInformationViewModel.Id)"
                                                         Filterable="true"
                                                         Id="area">
                                        </TelerikComboBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.AreaId)" />
                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Address" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikTextBox Placeholder="Address"
                                                    @bind-Value="@patient.Address"></TelerikTextBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.Address)" />

                            </MudItem>
                            <MudItem md="6">
                                <TelerikFloatingLabel Text="Reffer By" Class="custom-label w-100">
                                    <div class="k-form-field-wrap">
                                        <TelerikComboBox @bind-Value="@patient.RefferById"
                                                         Data="@refferBies"
                                                         Placeholder="Select Reffer By"
                                                         TextField="@nameof(RefferByViewModel.Name)"
                                                         ValueField="@nameof(RefferByViewModel.Id)"
                                                         Filterable="true"
                                                         Id="refferBy">
                                        </TelerikComboBox>
                                    </div>
                                </TelerikFloatingLabel>
                                <TelerikValidationMessage For="@(() => patient.RefferById)" />
                            </MudItem>
                            <MudItem md="6">
                                
                                    <MudItem md="12">
                                        <TelerikFloatingLabel Text="Occupation" Class="custom-label w-100">
                                            <div class="k-form-field-wrap">
                                                <TelerikTextBox Placeholder="Occupation"
                                                                @bind-Value="@patient.Occupation"></TelerikTextBox>
                                            </div>
                                        </TelerikFloatingLabel>
                                        <TelerikValidationMessage For="@(() => patient.Occupation)" />
                                    </MudItem>
                                    <MudItem md="12">
                                        <TelerikFloatingLabel Text="Insurance" Class="custom-label w-100">
                                            <div class="k-form-field-wrap">
                                                <TelerikComboBox @bind-Value="@patient.InsuranceId"
                                                                 Data="@insurances"
                                                                 Placeholder="Select Insurance"
                                                                 TextField="@nameof(InsuranceViewModel.Name)"
                                                                 ValueField="@nameof(InsuranceViewModel.Id)"
                                                                 Filterable="true"
                                                                 Id="insurance">
                                                </TelerikComboBox>
                                            </div>
                                        </TelerikFloatingLabel>
                                        <TelerikValidationMessage For="@(() => patient.Insurance)" />
                                    </MudItem>
                                    <MudItem md="12">
                                        <TelerikFloatingLabel Text="Insurance Number" Class="custom-label w-100">
                                            <div class="k-form-field-wrap">
                                                <TelerikTextBox Placeholder="Insurance Number"
                                                            @bind-Value="@patient.InsuranceNumber"></TelerikTextBox>
                                            </div>
                                        </TelerikFloatingLabel>
                                        <TelerikValidationMessage For="@(() => patient.InsuranceNumber)" />
                                    </MudItem>
                                    <MudItem md="12">
                                        <TelerikFloatingLabel Text="Proposal Number" Class="custom-label w-100">
                                            <div class="k-form-field-wrap">
                                                <TelerikTextBox Placeholder="Proposal Number"
                                                                @bind-Value="@patient.ProposalNumber"></TelerikTextBox>
                                            </div>
                                        </TelerikFloatingLabel>
                                        <TelerikValidationMessage For="@(() => patient.ProposalNumber   )" />
                                    </MudItem>
                                
                            </MudItem>
                            <MudItem md="6">
                                <MudItem md="12" Class="mt-2">
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadPhoto" Accept=".jpg,.jpeg,.png">
                                        <ButtonTemplate>
                                            <MudButton HtmlTag="label"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Primary"
                                                       StartIcon="@Icons.Filled.CloudUpload"
                                                       for="@context">
                                                Upload Photo
                                            </MudButton>
                                        </ButtonTemplate>
                                    </MudFileUpload>
                                </MudItem>
                                <MudItem md="12" Class="mt-3">
                                    @if (photo != null)
                                    {
                                        <MudImage Style="border-radius : 50%" Src=@String.Format("data:{0};base64,{1}",photoContentType,photo) Height="150"></MudImage>
                                    }
                                    else
                                    {
                                        <MudImage Src="/images/User.png" Height="150"></MudImage>
                                    }

                                </MudItem>

                            </MudItem>
                            
                        </MudGrid>
                </FormItems>
                <FormButtons>
                   <MudButton Class="mr-2 mt-3" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SavePatient">Save</MudButton>

                   @if(String.IsNullOrEmpty(Mode))
                   {
                        <MudButton Class="mt-3" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="Patients">Return</MudButton>
                   }
                </FormButtons>
            </TelerikForm>
                   
        </MudPaper>
    </MudItem>
    <MudItem md="1"></MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string? Mode { get; set; }
    [Parameter]
    public EventCallback<int> OnPatientAdded { get; set; }

    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string caption = "Add Patient";
    private PatientViewModel patient = new PatientViewModel();
    private List<BasicInformationViewModel> namePrefixes;
    private List<BasicInformationViewModel> genders;
    private List<BasicInformationViewModel> cities;
    private List<BasicInformationViewModel> areas;
    private List<RefferByViewModel> refferBies;
    private List<InsuranceViewModel> insurances;
    private SettingViewModel patientIdPrefix;

    bool success;
    TelerikForm form;
    private string photo;
    private string photoContentType;
    private bool attachmentChanged = false;
    private string patientAge = "";

    protected override async Task OnInitializedAsync()
    {
        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        namePrefixes = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("NamePrefix"));
        genders = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("Gender"));
        cities = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("City"));
        areas = await mediator.Send(new GetBasicInformationsByCategoryCodeQuery("Area"));
        refferBies = await mediator.Send(new GetAllRefferBiesQuery());
        insurances = await mediator.Send(new GetAllInsurancesQuery());

        if (!String.IsNullOrEmpty(Id))
        {
            if (Convert.ToInt32(Id) > 0)
            {
                caption = "Edit Patient";

                patient = await mediator.Send(new GetPatientByIdQuery(Convert.ToInt32(Id)));

                if (patient != null)
                {
                    DateOfBirthChanged();
                    photo = Convert.ToBase64String(patient.AttachmentContent);
                    photoContentType = patient.AttachmentContentType;
                }
            }
        }

    }

    public bool ValidSubmit { get; set; } = false;

    async void HandleValidSubmit()
    {
        ValidSubmit = true;

        await Task.Delay(2000);

        ValidSubmit = false;

        StateHasChanged();
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    protected async Task DateOfBirthChanged()
    {
        if (patient.DateOfBirth != null)
        {

            patientAge = DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now);
            
        }
        else
        {
            patientAge = "Unknown";
        }

    }

    protected async Task UploadPhoto(IBrowserFile file)
    {
        long maxFileSize = 1024 * 1024 * 5; // 5 MB or whatever, don't just use max int

        var readStream = file.OpenReadStream(maxFileSize);

        var buf = new byte[readStream.Length];

        var ms = new MemoryStream(buf);

        await readStream.CopyToAsync(ms);

        var buffer = ms.ToArray();

        photo = Convert.ToBase64String(buffer);
        photoContentType = file.ContentType;
        patient.AttachmentContent = buffer;
        patient.AttachmentContentType = file.ContentType;

        attachmentChanged = true;

    }

    protected async Task SavePatient()
    {
        

        if (form.IsValid())
        {
            if (attachmentChanged)
            {
                AttachmentViewModel attachment = new AttachmentViewModel()
                    {
                        Name = patient.Name + "_" + DateTime.Now.ToString(),
                        ContentType = patient.AttachmentContentType,
                        Content = patient.AttachmentContent,
                        Description = "User Photo"
                    };

                var attachmentCommand = MapperConfig.Mapper.Map<CreateAttachmentCommand>(attachment);
                CommandResponse attachmentResult = await mediator.Send(attachmentCommand);

                if (attachmentResult.ResultType == ResultType.Success)
                {
                    patient.AttachmentId = attachmentResult.Id;
                }
            }
            CommandResponse result;


            if (patient.Id > 0)
            {
                try
                {
                    patient.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditPatientCommand>(patient);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            if (String.IsNullOrEmpty(Mode))
                            {
                                navManager.NavigateTo("Patients");
                            }
                            else
                            {
                                if (Mode == "Modal")
                                await OnPatientAdded.InvokeAsync(result.Id);
                            }

                            
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected Patient", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    patient.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreatePatientCommand>(patient);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        if (String.IsNullOrEmpty(Mode))
                        {
                            navManager.NavigateTo("Patients");
                        }
                        else
                        {
                            if (Mode == "Modal")
                                await OnPatientAdded.InvokeAsync(result.Id);
                        }
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

