@page "/ReportTemplateDesign/{Id:int}"
@using Hospital.Application.Commands;
@using Hospital.Application.Mapper;
@using Hospital.Application.Queries;
@using Hospital.Application.Responses;
@using Hospital.Application.ViewModels;
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth;
@using Stimulsoft.Base
@using Stimulsoft.Report
@using Stimulsoft.Report.Blazor
@using Stimulsoft.Report.Dictionary
@using Stimulsoft.Report.Web
@using MediatR
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IHttpContextAccessor accessor

@attribute [Authorize]

<PageTitle>Report Template Design - HMIS System</PageTitle>

@*<MudPaper Style="background-color:red" Class="p-2" Elevation="10" Height="90vh">*@
<StiBlazorDesigner Report="@report"
                   OnSaveReport="@OnSaveReport" Height="800px" />
@*</MudPaper>*@
@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    private StiReport report;
    private ReportTemplateViewModel reportTemplate;


    protected override async Task OnInitializedAsync()
    {
        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("ReportTemplateDesign", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/ReportTemplateDesign/View");
        }

        if(Id > 0)
        {
            reportTemplate = await mediator.Send(new GetReportTemplateByIdQuery(Id));

            if (reportTemplate != null)
            {
                report = StiReport.CreateNewReport();

                report.Dictionary.Databases.Clear();

                if (!String.IsNullOrEmpty(reportTemplate.Content))
                {
                    report.LoadFromString(reportTemplate.Content);
                }

                if (reportTemplate.Code == "OPD")
                {
                    var oPDBills = await mediator.Send(new GetAllOPDBillsQuery());
                    report.RegBusinessObject("OPDBill", oPDBills.FirstOrDefault());

                    if (oPDBills != null)
                    {
                        var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(0));
                        report.RegBusinessObject("OPDBillServices", oPDBillServices);

                        
                    }

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patients = await mediator.Send(new GetAllPatientsQuery());
                    report.RegBusinessObject("Patient", patients.FirstOrDefault());

                    
                }
                else if (reportTemplate.Code == "OPDPayment")
                {
                    var oPDBillPayment = await mediator.Send(new GetAllOPDBillPaymentsQuery());
                    report.RegBusinessObject("OPDBillPayment", oPDBillPayment.FirstOrDefault());
                    
                    if (oPDBillPayment != null)
                    {
                        var oPDBill = await mediator.Send(new GetOPDBillByIdQuery(oPDBillPayment.FirstOrDefault().OPDBillId??0));
                        report.RegBusinessObject("OPDBill", oPDBill);
                    
                        //var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(0));
                        //report.RegBusinessObject("OPDBillServices", oPDBillServices);

                        //var oPDBillPayments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(0));
                        //report.RegBusinessObject("OPDBillPayments", oPDBillPayments);
                    }

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patients = await mediator.Send(new GetAllPatientsQuery());
                    report.RegBusinessObject("Patient", patients.FirstOrDefault());


                }
                else if(reportTemplate.Code == "IPD")
                {
                    var iPDRegisterations = await mediator.Send(new GetAllIPDRegisterationsQuery());
                    report.RegBusinessObject("IPDRegisteration", iPDRegisterations.FirstOrDefault());

                    if (iPDRegisterations != null)
                    {
                        var iPDRegisterationRooms = await mediator.Send(new GetIPDRegisterationRoomsByIPDRegisterationIdQuery(0));
                        report.RegBusinessObject("IPDRegisterationRooms", iPDRegisterationRooms);

                        var iPDRegisterationPayments = await mediator.Send(new GetIPDRegisterationPaymentsByIPDRegisterationIdQuery(0));
                        report.RegBusinessObject("IPDRegisterationPayments", iPDRegisterationPayments);

                        var iPDRegisterationServices = await mediator.Send(new GetIPDRegisterationServicesByIPDRegisterationIdQuery(0));
                        report.RegBusinessObject("IPDRegisterationServices", iPDRegisterationServices);

                        
                    }

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patients = await mediator.Send(new GetAllPatientsQuery());
                    report.RegBusinessObject("Patient", patients.FirstOrDefault());
                }
                else if (reportTemplate.Code == "IPDPayment")
                {
                    var iPDRegisterationPayment = await mediator.Send(new GetAllIPDRegisterationPaymentsQuery());
                    report.RegBusinessObject("IPDRegisterationPayment", iPDRegisterationPayment.FirstOrDefault());

                    if (iPDRegisterationPayment != null)
                    {
                        var iPDRegisteration = await mediator.Send(new GetIPDRegisterationByIdQuery(iPDRegisterationPayment.FirstOrDefault().IPDRegisterationId ?? 0));
                        report.RegBusinessObject("IPDRegisteration", iPDRegisteration);

                        //var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(0));
                        //report.RegBusinessObject("OPDBillServices", oPDBillServices);

                        //var oPDBillPayments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(0));
                        //report.RegBusinessObject("OPDBillPayments", oPDBillPayments);
                    }

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patients = await mediator.Send(new GetAllPatientsQuery());
                    report.RegBusinessObject("Patient", patients.FirstOrDefault());


                }

                report.Dictionary.Synchronize();

                report.Render();

                base.OnInitialized();
            }
        }
        

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //navManager.NavigateTo("/ReceiptreportTemplate", true);


    }

    protected async Task OnSaveReport(StiSaveReportEventArgs args)
    {
        var report = args.Report;

        var str = report.SaveToString();

        if (reportTemplate == null)
        {
            
        }
        else
        {
            reportTemplate.Content = str;
        }
        CommandResponse result;

        if (reportTemplate.Id > 0)
        {
            reportTemplate.ModifiedUser = userInfo?.Username;
            var command = MapperConfig.Mapper.Map<EditReportTemplateCommand>(reportTemplate);

            result = await mediator.Send(command);
        }
        else
        {
            reportTemplate.CreatedUser = userInfo?.Username;
            var command = MapperConfig.Mapper.Map<CreateReportTemplateCommand>(reportTemplate);

            result = await mediator.Send(command);
        }

        if (result.ResultType == ResultType.Success)
        {
            Snackbar.Add(result.ResultMessage, Severity.Success);

        }
        else if (result.ResultType == ResultType.Warning)
        {
            Snackbar.Add(result.ResultMessage, Severity.Warning);
        }
        else if (result.ResultType == ResultType.Error)
        {
            Snackbar.Add(result.ResultMessage, Severity.Error);
        }

    }
}
