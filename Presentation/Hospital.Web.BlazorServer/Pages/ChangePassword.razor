@page "/ChangePassword"
@using System.ComponentModel.DataAnnotations
@using Hospital.Application.Commands
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Domain.Core.Entities;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@inject IMediator mediator
@inject ISnackbar Snackbar

@attribute [Authorize]

<MudGrid Class="mt-2">
    <MudItem md="3"></MudItem>
    <MudItem md="6">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>Change Password</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="6">
                                <MudText>
                                    User : @userInfo?.FullName
                                </MudText>
                            </MudItem>
                            <MudItem md="6">
                                <MudText>
                                    Username : @userInfo?.Username
                                </MudText>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@oldPassword" Required="true" RequiredError="Please Enter Current Password" MaxLength="100" Label="Current Password" Placeholder="Current Password" InputType="InputType.Password" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@newPassword" Required="true" RequiredError="Please Enter New Password" MaxLength="100" Label="New Password" Placeholder="New Password" InputType="InputType.Password" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@repeatNewPassword" Required="true" RequiredError="Please Enter Repetition of New Password" MaxLength="100" Label="Repetition of New Password" Placeholder="Repetition of New Password" InputType="InputType.Password" Variant="Variant.Outlined" Clearable></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Class="ml-2" ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveChangePassword" Disabled="@(!success)">Change Password</MudButton>
                    </MudCardActions>

                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem md="3"></MudItem>
</MudGrid>

@code {
    [Parameter]
    public string Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string oldPassword = "";
    private string newPassword = "";
    private string repeatNewPassword = "";

    bool success;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {

    }

    protected async Task SaveChangePassword()
    {
        form.Validate();

        if (form.IsValid)
        {
            CommandResponse result;

            if (oldPassword == newPassword)
            {
                Snackbar.Add("The new password entered is the same as the previous password", Severity.Warning);
            }
            else if (newPassword != repeatNewPassword)
            {
                Snackbar.Add("The new and duplicate passwords do not match", Severity.Warning);
            }
            else
            {
                var user = await mediator.Send(new GetUserByUsernameQuery(userInfo?.Username ?? ""));

                if (user != null)
                {
                    if (CryptographyHelper.ValidatePassword(oldPassword, user.Password))
                    {
                        var command = new ChangePasswordCommand(user.Id, CryptographyHelper.Encrypt(newPassword));

                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }
                    }
                    else
                    {
                        Snackbar.Add("The previous password entered is not correct.", Severity.Warning);
                    }
                }
                else
                {
                    Snackbar.Add("User Not Found", Severity.Warning);
                }
            }

        }

    }


}
