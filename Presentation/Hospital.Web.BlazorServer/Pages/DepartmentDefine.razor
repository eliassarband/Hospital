@page "/DepartmentDefine/{Id}"

@using Hospital.Application.Commands
@using Hospital.Application.Mapper
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Super,Admin")]

<MudGrid Class="mt-2">
    <MudItem md="3"></MudItem>
    <MudItem md="6">
        <MudPaper Class="mt-2" Elevation="10">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudCard Class="mt-2">
                    <MudCardHeader>@caption</MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@department.Code" Required="true" RequiredError="Please Enter Code" MaxLength="100" Label="Code" Placeholder="Department Code" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@department.Name" Required="true" RequiredError="Please Enter Name" MaxLength="200" Label="Name" Placeholder="Department Name" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudSwitch T="bool" Class="mt-3" @bind-Checked="@department.IsMain" Label="Is Main" Color="Color.Success" UnCheckedColor="Color.Dark"></MudSwitch>
                            </MudItem>
                            <MudItem md="12">
                                <MudTextField T="string" Class="mt-3" @bind-Value="@department.MainDeptartment" Required="true" RequiredError="Please Enter Main Department" MaxLength="200" Label="MainDeptartment" Placeholder="Main Deptartment" Variant="Variant.Outlined"></MudTextField>
                            </MudItem>
                            <MudItem md="12">
                                <MudSwitch T="bool" Class="mt-3" @bind-Checked="@department.NotInUse" Label="Not In Use" Color="Color.Success" UnCheckedColor="Color.Dark"></MudSwitch>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Class="mr-2" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save" OnClick="SaveDepartment" Disabled="@(!success)">Save</MudButton>
                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="Departments">Return</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem md="3"></MudItem>
</MudGrid>


@code {
    [Parameter]
    public string Id { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private string caption = "Add Department";
    private DepartmentViewModel department = new DepartmentViewModel();
    bool success;
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(Id))
        {
            if (Convert.ToInt32(Id) > 0)
            {
                caption = "Edit Department";

                department = await mediator.Send(new GetDepartmentByIdQuery(Convert.ToInt32(Id)));

                if (department != null)
                {

                }
            }
        }

    }

    protected async Task SaveDepartment()
    {
        form.Validate();

        if (form.IsValid)
        {
            CommandResponse result;


            if (department.Id > 0)
            {
                try
                {
                    department.ModifiedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<EditDepartmentCommand>(department);

                    if (command.Id > 0)
                    {
                        result = await mediator.Send(command);

                        if (result.ResultType == ResultType.Success)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Success);

                            navManager.NavigateTo("/Departments");
                        }
                        else if (result.ResultType == ResultType.Warning)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Warning);
                        }
                        else if (result.ResultType == ResultType.Error)
                        {
                            Snackbar.Add(result.ResultMessage, Severity.Error);
                        }

                    }
                    else
                    {
                        Snackbar.Add("Error in selected Department", Severity.Warning);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    department.CreatedUser = userInfo?.Username;
                    var command = MapperConfig.Mapper.Map<CreateDepartmentCommand>(department);

                    result = await mediator.Send(command);

                    if (result.ResultType == ResultType.Success)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Success);

                        navManager.NavigateTo("/Departments");
                    }
                    else if (result.ResultType == ResultType.Warning)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Warning);
                    }
                    else if (result.ResultType == ResultType.Error)
                    {
                        Snackbar.Add(result.ResultMessage, Severity.Error);
                    }
                }
                catch (Exception exp)
                {
                    Snackbar.Add(exp.Message, Severity.Error);
                }
            }
        }

    }

}

