@page "/ReportShow/{ReportCode}/{Id:int}"
@using Hospital.Application.Commands;
@using Hospital.Application.Mapper;
@using Hospital.Application.Queries;
@using Hospital.Application.Responses;
@using Hospital.Application.ViewModels;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth;

@using Stimulsoft.Base
@using Stimulsoft.Report
@using Stimulsoft.Report.Blazor
@using Stimulsoft.Report.Dictionary
@using Stimulsoft.Report.Web
@using MediatR
@using System.Drawing.Printing;
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar


@attribute [Authorize(Roles = "Super,Admin,User")]
<MudPaper Class="mt-4 pr-2 pl-2" Elevation="10">
    <MudGrid Class="mt-2">
        <MudItem md="12">
            <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="OPDBills">Return</MudButton>
        </MudItem>
        <MudItem md="12">
            <StiBlazorViewer Report="@report" Height="800px" />
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string ReportCode { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    private StiReport report;
    private ReportTemplateViewModel reportTemplate;


    protected override async Task OnInitializedAsync()
    {


        if (Id > 0)
        {

            PrinterSettings settings = new PrinterSettings();
            string defaultPrinterName = settings.PrinterName;
            List<OPDBillViewModel> oPDBills = new List<OPDBillViewModel>();

            var oPDBill = await mediator.Send(new GetOPDBillByIdQuery(Id));

            oPDBills.Add(oPDBill);

            var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(Id));

            if (oPDBills != null)
            {
                reportTemplate = await mediator.Send(new GetReportTemplateByCodeQuery(ReportCode));

                report = StiReport.CreateNewReport();

                report.Dictionary.Databases.Clear();

                if (reportTemplate != null)
                {
                    report.LoadFromString(reportTemplate.Content);
                }

                report.RegData("OPDBillData",ConverterHelper.ListToDataTable(oPDBills));
                report.RegData("OPDBillService",ConverterHelper.ListToDataTable(oPDBillServices));

                var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                List<HospitalInformationViewModel> hospitals = new List<HospitalInformationViewModel>();
                hospitals.Add(hospital);

                report.RegData("HospitalInformation", ConverterHelper.ListToDataTable(hospitals));

                

                report.Dictionary.Synchronize();

                //report.Print();

                //base.OnInitialized();


            }
        }

    }


}
