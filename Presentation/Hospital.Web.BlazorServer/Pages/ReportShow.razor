@page "/ReportShow/{ReportId:int}/{Id:int}"
@using Hospital.Application.Commands;
@using Hospital.Application.Mapper;
@using Hospital.Application.Queries;
@using Hospital.Application.Responses;
@using Hospital.Application.ViewModels;
@using Hospital.Domain.Core.Helpers;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth;

@using Stimulsoft.Base
@using Stimulsoft.Report
@using Stimulsoft.Report.Blazor
@using Stimulsoft.Report.Dictionary
@using Stimulsoft.Report.Web
@using MediatR
@using System.Drawing.Printing;
@inject IMediator mediator
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IHttpContextAccessor accessor

@attribute [Authorize]

<PageTitle>Report Show - HMIS System</PageTitle>

<MudPaper Class="mt-4 pr-2 pl-2" Elevation="10">
    <MudGrid Class="mt-2">
        @*<MudItem md="12">
            <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.KeyboardReturn" Href="OPDBills">Return</MudButton>
        </MudItem>*@
        <MudItem md="12">
            <StiBlazorViewer Report="@report" Height="800px" />
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int ReportId { get; set; }
    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }
    private StiReport report;
    private ReportTemplateViewModel reportTemplate;


    protected override async Task OnInitializedAsync()
    {
        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("ReportShow", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/ReportShow/View");
        }

        if(ReportId > 0)
        {
            reportTemplate = await mediator.Send(new GetReportTemplateByIdQuery(ReportId));

            if(reportTemplate.Code=="OPD")
            {
                var oPDBill = await mediator.Send(new GetOPDBillByIdQuery(Id));

                if (oPDBill != null)
                {
                    report = StiReport.CreateNewReport();

                    report.Dictionary.Databases.Clear();

                    if (reportTemplate != null)
                    {
                        report.LoadFromString(reportTemplate.Content);
                    }

                    report.RegBusinessObject("OPDBill", oPDBill);

                    var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(Id));
                    report.RegBusinessObject("OPDBillServices", oPDBillServices);

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));
                    report.RegBusinessObject("Patient", patient);

                    SettingViewModel patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
                    SettingViewModel receiptNoPrefix = await mediator.Send(new GetSettingByKeyQuery("OPDReceiptNoPrefix"));

                    oPDBill.ReceiptNo = UtilityHelper.GenerateIdentifier(receiptNoPrefix.Value, oPDBill.Id);
                    patient.PatientId = UtilityHelper.GenerateIdentifier(patientIdPrefix.Value, oPDBill.PatientId);
                    patient.Age = DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now);

                    report.Dictionary.Synchronize();

                    if (oPDBill.PrintCount == null)
                    {
                        oPDBill.PrintCount = 1;
                    }
                    else
                    {
                        oPDBill.PrintCount += 1;
                    }

                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);
                    await mediator.Send(command);
                    //report.Print();

                    //base.OnInitialized();


                }
            }
            else if (reportTemplate.Code == "OPDPayment")
            {
                
                var oPDBillPayment = await mediator.Send(new GetOPDBillPaymentByIdQuery(Id));

                if (oPDBillPayment != null)
                {
                    report = StiReport.CreateNewReport();

                    report.Dictionary.Databases.Clear();

                    if (reportTemplate != null)
                    {
                        report.LoadFromString(reportTemplate.Content);
                    }

                    report.RegBusinessObject("OPDBillPayment", oPDBillPayment);

                    var oPDBill = await mediator.Send(new GetOPDBillByIdQuery(oPDBillPayment.OPDBillId ?? 0));
                    report.RegBusinessObject("OPDBill", oPDBill);

                    //var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));
                    //report.RegBusinessObject("OPDBillServices", oPDBillServices);

                    //var oPDBillPayments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(oPDBill.Id));
                    //report.RegBusinessObject("OPDBillPayments", oPDBillPayments);

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patient = await mediator.Send(new GetPatientByIdQuery(oPDBill.PatientId));
                    report.RegBusinessObject("Patient", patient);

                    SettingViewModel patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
                    SettingViewModel receiptNoPrefix = await mediator.Send(new GetSettingByKeyQuery("OPDReceiptNoPrefix"));

                    oPDBill.ReceiptNo = UtilityHelper.GenerateIdentifier(receiptNoPrefix.Value, oPDBill.Id);
                    patient.PatientId = UtilityHelper.GenerateIdentifier(patientIdPrefix.Value, oPDBill.PatientId);
                    patient.Age = DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now);

                    report.Dictionary.Synchronize();

                    if (oPDBill.PrintCount == null)
                    {
                        oPDBill.PrintCount = 1;
                    }
                    else
                    {
                        oPDBill.PrintCount += 1;
                    }

                    var command = MapperConfig.Mapper.Map<EditOPDBillCommand>(oPDBill);
                    await mediator.Send(command);
                    //report.Print();

                    //base.OnInitialized();


                }
            }
            else if (reportTemplate.Code == "IPD")
            {
                var iPDRegisteration = await mediator.Send(new GetIPDRegisterationByIdQuery(Id));

                if (iPDRegisteration != null)
                {
                    report = StiReport.CreateNewReport();

                    report.Dictionary.Databases.Clear();

                    if (reportTemplate != null)
                    {
                        report.LoadFromString(reportTemplate.Content);
                    }

                    report.RegBusinessObject("IPDRegisteration", iPDRegisteration);

                    var iPDRegisterationRooms = await mediator.Send(new GetIPDRegisterationRoomsByIPDRegisterationIdQuery(iPDRegisteration.Id));
                    report.RegBusinessObject("IPDRegisterationRooms", iPDRegisterationRooms);

                    var iPDRegisterationServices = await mediator.Send(new GetIPDRegisterationServicesByIPDRegisterationIdQuery(iPDRegisteration.Id));
                    report.RegBusinessObject("IPDRegisterationServices", iPDRegisterationServices);

                    var iPDRegisterationPayments = await mediator.Send(new GetIPDRegisterationPaymentsByIPDRegisterationIdQuery(iPDRegisteration.Id));
                    report.RegBusinessObject("IPDRegisterationPayments", iPDRegisterationPayments);

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));
                    report.RegBusinessObject("Patient", patient);

                    SettingViewModel patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
                    SettingViewModel iPDNoPrefix = await mediator.Send(new GetSettingByKeyQuery("IPDNoPrefix"));

                    iPDRegisteration.IPDNo = UtilityHelper.GenerateIdentifier(iPDNoPrefix.Value, iPDRegisteration.Id);
                    patient.PatientId = UtilityHelper.GenerateIdentifier(patientIdPrefix.Value, iPDRegisteration.PatientId);
                    patient.Age = DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now);

                    report.Dictionary.Synchronize();

                    //report.Print();

                    //base.OnInitialized();

                    if (iPDRegisteration.PrintCount == null)
                    {
                        iPDRegisteration.PrintCount = 1;
                    }
                    else
                    {
                        iPDRegisteration.PrintCount += 1;
                    }

                    var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPDRegisteration);
                    await mediator.Send(command);

                }
            
            }
            else if (reportTemplate.Code == "IPDPayment")
            {

                var iPDRegisterationPayment = await mediator.Send(new GetIPDRegisterationPaymentByIdQuery(Id));

                if (iPDRegisterationPayment != null)
                {
                    report = StiReport.CreateNewReport();

                    report.Dictionary.Databases.Clear();

                    if (reportTemplate != null)
                    {
                        report.LoadFromString(reportTemplate.Content);
                    }

                    report.RegBusinessObject("IPDRegisterationPayment", iPDRegisterationPayment);

                    var iPDRegisteration = await mediator.Send(new GetIPDRegisterationByIdQuery(iPDRegisterationPayment.IPDRegisterationId ?? 0));
                    report.RegBusinessObject("IPDRegisteration", iPDRegisteration);

                    //var oPDBillServices = await mediator.Send(new GetOPDBillServicesByOPDBillIdQuery(oPDBill.Id));
                    //report.RegBusinessObject("OPDBillServices", oPDBillServices);

                    //var oPDBillPayments = await mediator.Send(new GetOPDBillPaymentsByOPDBillIdQuery(oPDBill.Id));
                    //report.RegBusinessObject("OPDBillPayments", oPDBillPayments);

                    var hospital = await mediator.Send(new GetHospitalInformationByIdQuery(1));
                    report.RegBusinessObject("HospitalInformation", hospital);

                    var patient = await mediator.Send(new GetPatientByIdQuery(iPDRegisteration.PatientId));
                    report.RegBusinessObject("Patient", patient);

                    SettingViewModel patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
                    SettingViewModel iPDNoPrefix = await mediator.Send(new GetSettingByKeyQuery("IPDNoPrefix"));

                    iPDRegisteration.IPDNo = UtilityHelper.GenerateIdentifier(iPDNoPrefix.Value, iPDRegisteration.Id);
                    patient.PatientId = UtilityHelper.GenerateIdentifier(patientIdPrefix.Value, iPDRegisteration.PatientId);
                    patient.Age = DateHelper.CalculateAgeDescription(patient.DateOfBirth ?? DateTime.Now);

                    report.Dictionary.Synchronize();

                    if (iPDRegisteration.PrintCount == null)
                    {
                        iPDRegisteration.PrintCount = 1;
                    }
                    else
                    {
                        iPDRegisteration.PrintCount += 1;
                    }

                    var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPDRegisteration);
                    await mediator.Send(command);
                    //report.Print();

                    //base.OnInitialized();


                }
            }

        
        }

    }


}
