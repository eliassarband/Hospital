@page "/IPDRegisterations"
@using Hospital.Application.Commands
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using MediatR
@inject IMediator mediator;
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@attribute [Authorize(Roles = "Super,Admin,Operator")]

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudCard Class="pl-2 pr-2 mt-2">
                <MudCardHeader>Admated Patient List</MudCardHeader>
                <MudCardActions>
                    <MudButton ButtonType="MudBlazor.ButtonType.Button" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href=@String.Format("IPDRegisterationDefine/0")>Add IPD Registeration</MudButton>
                </MudCardActions>
                <MudCardContent>
                    <MudTable @ref="@_table" Items="@Elements" RowsPerPage="5" Hover="true" FixedHeader="true" FixedFooter="true" Striped="true" Breakpoint="Breakpoint.Sm" Class="" Loading="@loading" LoadingProgressColor="Color.Info" Filter="new Func<IPDRegisterationViewModel,bool>(FilterIPDRegisterationInit)">
                        <ToolBarContent>
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>PatientId</MudTh>
                            <MudTh>IPD No</MudTh>
                            <MudTh>Admation Date</MudTh>
                            <MudTh>Gender</MudTh>
                            <MudTh>Patient</MudTh>
                            <MudTh>F-Name</MudTh>
                            <MudTh>Mob</MudTh>
                            <MudTh>Reffer By</MudTh>
                            <MudTh>Consultant</MudTh>
                            <MudTh>Ward</MudTh>
                            <MudTh>Room</MudTh>
                            <MudTh>R-Type</MudTh>
                            <MudTh>Bed</MudTh>
                            <MudTh>Edit</MudTh>
                            <MudTh>Cancel</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="PatientId">
                                @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,context.PatientId??0)
                            </MudTd>
                            <MudTd DataLabel="IPDNo">
                                @UtilityHelper.GenerateIdentifier(iPDNoPrefix.Value,context.Id)
                            </MudTd>
                            <MudTd DataLabel="AdmationDate">@context.Date</MudTd>
                            <MudTd DataLabel="Gender">@context.Patient.GenderName</MudTd>
                            <MudTd DataLabel="Patient">@context.PatientName</MudTd>
                            <MudTd DataLabel="FatherName">@context.Patient.FatherName</MudTd>
                            <MudTd DataLabel="Mobile">@context.Patient.Mobile</MudTd>
                            <MudTd DataLabel="RefferBy">@context.RefferByName</MudTd>
                            <MudTd DataLabel="Consultant">@context.ConsultantInchargeName</MudTd>
                            <MudTd DataLabel="Ward">@context.WardName</MudTd>
                            <MudTd DataLabel="Room">@context.RoomName</MudTd>
                            <MudTd DataLabel="RoomType">@context.RoomTypeName</MudTd>
                            <MudTd DataLabel="Bed">@context.BedName</MudTd>
                            <MudTd DataLabel="RoomType">
                                <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href=@String.Format("IPDRegisterationDefine/{0}",context.Id)></MudIconButton>
                            </MudTd>
                            <MudTd DataLabel="Delete">
                                <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(()=> DeleteIPDRegisteration(@context.Id))"></MudIconButton>
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    private MudTable<IPDRegisterationViewModel> _table;
    private List<IPDRegisterationViewModel> Elements;
    private bool loading = false;
    private string searchString = "";

    private SettingViewModel patientIdPrefix;
    private SettingViewModel iPDNoPrefix;

    protected override async Task OnInitializedAsync()
    {
        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        iPDNoPrefix = await mediator.Send(new GetSettingByKeyQuery("IPDNoPrefix"));
        Elements = await mediator.Send(new GetAllIPDRegisterationsQuery());
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterIPDRegisterationInit(IPDRegisterationViewModel element) => FilterIPDRegisteration(element, searchString);

    private bool FilterIPDRegisteration(IPDRegisterationViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PatientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.RefferByName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Date.ToString()} {element.PatientName} {element.RefferByName}".Contains(searchString))
            return true;
        return false;
    }

    protected async Task DeleteIPDRegisteration(int Id)
    {
        bool? dialogResult = await DialogService.ShowMessageBox(
            "Delete IPD Registeration",
            "Are you sure?",
            yesText: "Delete!", cancelText: "No");

        if (dialogResult == true)
        {
            loading = true;
            try
            {
                CommandResponse result;

                result = await mediator.Send(new DeleteIPDRegisterationCommand(Id));

                if (result.ResultType == ResultType.Success)
                {
                    Elements = await mediator.Send(new GetAllIPDRegisterationsQuery());
                    Snackbar.Add(result.ResultMessage, Severity.Success);
                }
                else if (result.ResultType == ResultType.Warning)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Warning);
                }
                else if (result.ResultType == ResultType.Error)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Error);
                }



            }
            catch (Exception exp)
            {
                Snackbar.Add(exp.Message, Severity.Error);
            }
            loading = false;

        }


    }


}
