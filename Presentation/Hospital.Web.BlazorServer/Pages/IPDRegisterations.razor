@page "/IPDRegisterations"
@using Hospital.Application.Commands
@using Hospital.Application.Mapper;
@using Hospital.Application.Queries
@using Hospital.Application.Responses
@using Hospital.Application.ViewModels
@using Hospital.Domain.Core.Entities;
@using Hospital.Web.BlazorServer.Helpers;
@using Hospital.Web.BlazorServer.Models.Auth;
@using MediatR
@inject IMediator mediator;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager navManager
@inject IHttpContextAccessor accessor

@attribute [Authorize]

<PageTitle>Admited Patinet List - HMIS System</PageTitle>

<MudGrid Class="mt-2">
    <MudItem md="12">
        <MudPaper Class="mt-2" Elevation="10">
            <MudCard Class="pl-2 pr-2 mt-2">
                <MudCardHeader>Admited Patinet List</MudCardHeader>
                <MudCardActions>
                    @if (addAccess)
                    {
                        <MudButton ButtonType="MudBlazor.ButtonType.Button" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Href=@String.Format("IPDRegisterationDefine/0")>Add IPD Registeration</MudButton>
                    }
                </MudCardActions>
                <MudCardContent>
                    <MudTable @ref="@_table" Items="@Elements" RowsPerPage="5" Hover="true" FixedHeader="true" FixedFooter="true" Striped="true" Breakpoint="Breakpoint.Sm" Class="" Loading="@loading" LoadingProgressColor="Color.Info" Filter="new Func<IPDRegisterationViewModel,bool>(FilterIPDRegisterationInit)">
                        <ToolBarContent>
                            <MudSpacer />
                            <MudCheckBox Label="Admited Patient" Checked="@admitedCheched" CheckedChanged="@( (bool g) => AdmitedChanged(g) )" />
                            <MudCheckBox Label="Discharge Patient" Checked="@dischargeCheched" CheckedChanged="@( (bool g) => DischargeChanged(g) )" />
                            <MudSpacer />
                            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable></MudTextField>
                            
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Patient Id</MudTh>
                            <MudTh>IPD No</MudTh>
                            <MudTh>admition Date</MudTh>
                            <MudTh>Discharge Date</MudTh>
                            <MudTh>Gender</MudTh>
                            <MudTh>Patient</MudTh>
                            <MudTh>F-Name</MudTh>
                            <MudTh>Mob</MudTh>
                            <MudTh>Reffer By</MudTh>
                            <MudTh>Consultant</MudTh>
                            <MudTh>Ward</MudTh>
                            <MudTh>Room</MudTh>
                            <MudTh>R-Type</MudTh>
                            <MudTh>Bed</MudTh>
                            @if (dischargeAccess)
                            {
                                <MudTh>Discharge</MudTh>
                            }
                            @if (printAccess)
                            {
                                <MudTh>Print</MudTh>
                            }
                            @if (editAccess)
                            {
                                <MudTh>Edit</MudTh>
                            }
                            @if (cancelAccess)
                            {
                                <MudTh>Cancel</MudTh>
                            }
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="PatientId">
                                @UtilityHelper.GenerateIdentifier(patientIdPrefix.Value,context.PatientId)
                            </MudTd>
                            <MudTd DataLabel="IPDNO">
                                @UtilityHelper.GenerateIdentifier(iPDNoPrefix.Value,context.Id)
                            </MudTd>
                            <MudTd DataLabel="admitionDate">@context.Date</MudTd>
                            <MudTd DataLabel="DischargeDate">@context.DischargeDate</MudTd>
                            <MudTd DataLabel="Gender">@context.Patient.Gender.Name</MudTd>
                            <MudTd DataLabel="Patient">@context.PatientName</MudTd>
                            <MudTd DataLabel="Father Name">@context.Patient.FatherName</MudTd>
                            <MudTd DataLabel="Mobile">@context.Patient.Mobile</MudTd>
                            <MudTd DataLabel="RefferBy">@context.RefferByName</MudTd>
                            <MudTd DataLabel="Consultant">@context.ConsultantInchargeName</MudTd>
                            <MudTd DataLabel="Ward">@context.WardName</MudTd>
                            <MudTd DataLabel="Room">@context.RoomName</MudTd>
                            <MudTd DataLabel="RoomType">@context.RoomTypeName</MudTd>
                            <MudTd DataLabel="Bed">@context.BedName</MudTd>
                            @if (dischargeAccess)
                            {
                                <MudTd DataLabel="Discharge">
                                @if (context.PayableAmount == context.IPDRegisterationPayments.Sum(p => p.Amount) && !(context.Discharged??false))
                                {

                                        <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.NewReleases" Color="Color.Info" OnClick="@(()=> Discharge(@context.Id))"></MudIconButton>
                                
                                }
                                </MudTd>
                            }
                            @if (printAccess)
                            {
                                <MudTd DataLabel="Print">
                                <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Print" Color="Color.Tertiary" OnClick="@(()=> Print(@context.Id))"></MudIconButton>
                                </MudTd>
                            }
                            @if (editAccess)
                            {
                                <MudTd DataLabel="Edit">
                                    <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Href=@String.Format("IPDRegisterationDefine/{0}",context.Id)></MudIconButton>
                                </MudTd>
                            }
                            @if (cancelAccess)
                            {
                                <MudTd DataLabel="Cancel">
                                    <MudIconButton ButtonType="MudBlazor.ButtonType.Button" Icon="@Icons.Material.Filled.Cancel" Color="Color.Secondary" OnClick="@(()=> DeleteIPDRegisteration(@context.Id))"></MudIconButton>
                                </MudTd>
                            }
                        </RowTemplate>
                        <PagerContent>
                            <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudPaper>
    </MudItem>
</MudGrid>

<TelerikWindow Class="demo-window" Width="40vw" Height="70vh" Centered="true" @bind-Visible=@selectReportTemplate Modal="true">
    <WindowTitle>
        <strong>Select Report Template</strong>
    </WindowTitle>
    <WindowActions>
        <WindowAction Name="Close" />
    </WindowActions>
    <WindowContent>
        <ReportTemplatesSelect Id="@IPDId" ReportCode="IPD"></ReportTemplatesSelect>
    </WindowContent>
</TelerikWindow>

@code {
    [CascadingParameter]
    public DialogFactory Dialogs { get; set; }

    [CascadingParameter]
    public LoginedUser? userInfo { get; set; }

    private MudTable<IPDRegisterationViewModel> _table;
    private List<IPDRegisterationViewModel> Elements;
    private bool loading = false;
    private string searchString = "";
    private bool admitedCheched = true;
    private bool dischargeCheched = false;
    private bool selectReportTemplate = false;
    private int IPDId = 0;

    private SettingViewModel patientIdPrefix;
    private SettingViewModel iPDNoPrefix;

    private bool addAccess = false;
    private bool editAccess = false;
    private bool cancelAccess = false;
    private bool dischargeAccess = false;
    private bool printAccess = false;

    protected override async Task OnInitializedAsync()
    {
        if (userInfo == null)
        {
            IdentityHelper identityHelper = new IdentityHelper(accessor, mediator);
            userInfo = await identityHelper.GetUserInfo();
        }

        if (!(await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "View", userInfo.UserId))))
        {
            navManager.NavigateTo("AccessDenied/IPDRegisterations/View");
        }
        addAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "Add", userInfo.UserId));
        editAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "Edit", userInfo.UserId));
        cancelAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "Cancel", userInfo.UserId));
        dischargeAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "Discharge", userInfo.UserId));
        printAccess = await mediator.Send(new CheckUserActionAccessQuery("IPDRegisterations", "Print", userInfo.UserId));

        patientIdPrefix = await mediator.Send(new GetSettingByKeyQuery("PatientIdPrefix"));
        iPDNoPrefix = await mediator.Send(new GetSettingByKeyQuery("IPDNoPrefix"));

        LoadData();
    }

    protected async Task LoadData()
    {
        Elements = await mediator.Send(new GetAllIPDRegisterationsQuery());

        if (admitedCheched == true && dischargeCheched == true)
            Elements = Elements.Where(e => e.Canceled != true).ToList();
        else if (admitedCheched == true && dischargeCheched == false)
            Elements = Elements.Where(e => e.Canceled != true && e.Discharged != true).ToList();
        else if (admitedCheched == false && dischargeCheched == true)
            Elements = Elements.Where(e => e.Canceled != true && e.Discharged == true).ToList();
        else if (admitedCheched == false && dischargeCheched == false)
            Elements = Elements.Where(e => e.Canceled != true && 1 == 2).ToList();

        foreach(var item in Elements)
        {
            CalculateRoomDays(item.IPDRegisterationRooms);
            CalculateAmount(item);
        }
    }

    protected async Task CalculateRoomDays(IEnumerable<IPDRegisterationRoomViewModel> iPDRegisterationRooms)
    {
        foreach (var room in iPDRegisterationRooms)
        {
            DateTime toDate;

            if (room.ToDate == null)
            {
                toDate = DateTime.Now;
            }
            else
            {
                toDate = room.ToDate ?? DateTime.Now;
            }

            TimeSpan span = toDate.Subtract(room.Date);

            room.Days = span.Days + 1;

            room.Amount = room.Days * room.Rate;
        }
    }

    private async void CalculateAmount(IPDRegisterationViewModel iPDReg)
    {
        var serviceTotal = iPDReg.IPDRegisterationServices.Sum(b => b.Rate * b.Quantity);
        var servicePayable = iPDReg.IPDRegisterationServices.Sum(b => b.Amount);

        var roomTotal = iPDReg.IPDRegisterationRooms.Sum(b => b.Rate * b.Days);
        var roomPayable = iPDReg.IPDRegisterationRooms.Sum(b => b.Amount);

        iPDReg.TotalAmount = serviceTotal + roomTotal;
        iPDReg.PayableAmount = servicePayable + roomPayable;
        int totalDiscount = (serviceTotal + roomTotal) - (servicePayable + roomPayable);

        int roomAmount = roomTotal;
        int serviceAmount = serviceTotal;
        int medicineAmount = 0;
        int paidAmount = iPDReg.IPDRegisterationPayments.Sum(p => p.Amount);
        int remainAmount = iPDReg.PayableAmount - paidAmount;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    protected async Task AdmitedChanged(bool admited)
    {
        admitedCheched = admited;

        LoadData();
    }

    protected async Task DischargeChanged(bool discharge)
    {
        dischargeCheched = discharge;

        LoadData();
    }

    private bool FilterIPDRegisterationInit(IPDRegisterationViewModel element) => FilterIPDRegisteration(element, searchString);

    private bool FilterIPDRegisteration(IPDRegisterationViewModel element, string searchString)
    {

        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DischargeDate.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PatientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.RefferByName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Date.ToString()} {element.DischargeDate.ToString()} {element.PatientName} {element.RefferByName}".Contains(searchString))
            return true;

        return false;
    }

    protected async Task Print(int IPDRegisterationId)
    {
        IPDId = IPDRegisterationId;
        selectReportTemplate = true;
    }

    protected async Task Discharge(int IPDRegisterationId)
    {
        //string input;

        //input = await Dialogs.PromptAsync("Please, enter your Reason.", "Cancel Reason");

        bool? dialogResult = await DialogService.ShowMessageBox(
            "Discharge IPD Registeration",
            "Are you sure?",
            yesText: "Discharge!", cancelText: "No");

        if (dialogResult == true)
        {
            loading = true;
            try
            {
                CommandResponse result;
                var iPD = await mediator.Send(new GetIPDRegisterationByIdQuery(IPDRegisterationId));
                iPD.Discharged = true;
                iPD.DischargeDate = DateTime.Now;

                var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPD);

                result = await mediator.Send(command);

                if (result.ResultType == ResultType.Success)
                {
                    LoadData();
                    Snackbar.Add(result.ResultMessage, Severity.Success);
                }
                else if (result.ResultType == ResultType.Warning)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Warning);
                }
                else if (result.ResultType == ResultType.Error)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Error);
                }



            }
            catch (Exception exp)
            {
                Snackbar.Add(exp.Message, Severity.Error);
            }
            loading = false;

        }
    }

    protected async Task DeleteIPDRegisteration(int Id)
    {
        string input;

        input = await Dialogs.PromptAsync("Please, enter your Reason.", "Cancel Reason");

        //bool? dialogResult = await DialogService.ShowMessageBox(
        //    "Cancel IPD Registeration",
        //    "Are you sure?",
        //    yesText: "Cancel!", cancelText: "No");

        if (!String.IsNullOrWhiteSpace(input))
        {
            loading = true;
            try
            {
                CommandResponse result;
                var iPD = await mediator.Send(new GetIPDRegisterationByIdQuery(Id));
                iPD.Canceled = true;
                iPD.CancelReason = input;

                var command = MapperConfig.Mapper.Map<EditIPDRegisterationCommand>(iPD);

                result = await mediator.Send(command);

                if (result.ResultType == ResultType.Success)
                {
                    LoadData();
                    Snackbar.Add(result.ResultMessage, Severity.Success);
                }
                else if (result.ResultType == ResultType.Warning)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Warning);
                }
                else if (result.ResultType == ResultType.Error)
                {
                    Snackbar.Add(result.ResultMessage, Severity.Error);
                }



            }
            catch (Exception exp)
            {
                Snackbar.Add(exp.Message, Severity.Error);
            }
            loading = false;

        }


    }


}
