@using Hospital.Application.Commands;
@using Hospital.Application.Mapper;
@using Hospital.Application.Queries
@using Hospital.Application.ViewModels;
@using Hospital.Web.BlazorServer.Models.Auth
@using MediatR
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject IHttpContextAccessor accessor
@inject Hospital.Web.BlazorServer.Models.TokenProvider _tokenProvider;
@inject IMediator mediator;

<PageTitle>Hospital.Web.BlazorServer</PageTitle>

<MudRTLProvider RightToLeft="false">
    <MudThemeProvider IsDarkMode="@ThemeState" />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <MudAppBar Elevation="1" Color="@AppBarColor">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" Size="Size.Large" OnClick="@((e) => DrawerToggle())" />
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                @if(hospitalInformation != null)
                {
                    <MudImage Src=@String.Format("data:image/png;base64,{0}",Convert.ToBase64String(hospitalInformation.WhiteLogo)) Class="mr-1" Height="50"></MudImage>
                    <MudText Typo="Typo.h5">@hospitalInformation.Name</MudText>
                }
                
            </MudHidden>
            <MudSpacer />
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <MudText Class="mr-2"> @userInfo?.FullName </MudText>
                <MudAvatar Class="mr-2" Image="@photo"></MudAvatar>
                
                @*<MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudAvatar Class="mr-2" Image="@photo"></MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Icon="@Icons.Material.Filled.Password" Href="ChangePassword">Change Password</MudMenuItem>
                    </ChildContent>
                </MudMenu>*@

                <MudBadge Content="300" Overlap="true" Color="Color.Warning" Visible="true" Class="mr-2" Origin="Origin.TopRight">
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit"/>
                </MudBadge>
                <MudBadge Content="4" Overlap="true" Color="Color.Warning" Visible="true" Class="mr-2" Origin="Origin.TopRight">
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Email" Color="Color.Inherit" />
                </MudBadge>
                <MudToggleIconButton Toggled="@ThemeState" ToggledChanged="OnThemeToggledChanged" Class="mr-2"
                                     Icon="@Icons.Material.Filled.LightMode" Color="@Color.Inherit" Title="Light Mode"
                                     ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="@Color.Warning" ToggledTitle="Dark Mode" Variant="Variant.Outlined" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Class="mr-2" />
                
            </MudHidden>
            <MudForm method="post" action="identiy/account/logout">
                <input name="__RequestVerificationToken" type="hidden" value="@_tokenProvider.AntiForgeryToken" />
                     
                <MudIconButton Variant="Variant.Outlined" ButtonType="ButtonType.Submit" Color="Color.Inherit" Title="Logout" Icon="@Icons.Material.Filled.Logout"></MudIconButton>
            </MudForm>
        </MudAppBar>
        <MudDrawer Color="@DrawerColor" @bind-Open="@_drawerOpen" Fixed="true" ClipMode="DrawerClipMode.Docked" Elevation="2" Anchor="Anchor.Left" Variant="DrawerVariant.Mini" OpenMiniOnHover="false">
            
            <MudNavMenu Color="Color.Info" Bordered="true" Rounded="true">
                <NavMenu/>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large">
                <CascadingValue Value="@userInfo">
                    
                    @Body
                </CascadingValue>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</MudRTLProvider>
@code {
    bool _drawerOpen = true;
    private LoginedUser? userInfo;
    public bool ThemeState { get; set; }
    private string photo { get; set; }
    public Color DrawerColor { get; set; }
    public Color AppBarColor { get; set; }
    private HospitalInformationViewModel hospitalInformation = new HospitalInformationViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (accessor.HttpContext != null)
        {

            if (accessor.HttpContext.User.Identity.IsAuthenticated)
            {
                string username = accessor.HttpContext.User.Identity.Name;
                if (!String.IsNullOrEmpty(username))
                {
                    userInfo = new LoginedUser();
                    userInfo.Username = username;

                    var user = await mediator.Send(new GetUserByUsernameQuery(username));
                    if (user != null)
                    {
                        userInfo.UserId = user.Id;
                        userInfo.FullName = user.FullName();
                        userInfo.ThemeName = user.Theme;
                        //userInfo.RoleCode = user.Role.Code;
                        //userInfo.RoleName = user.Role.Name;

                        if(user.Attachment!=null)
                        {
                            photo = @String.Format("data:{0};base64,{1}", user.AttachmentContentType, Convert.ToBase64String(user.AttachmentContent));
                        }
                        else
                        {
                            photo = "/images/User.png";
                        }

                        if (!String.IsNullOrEmpty(user.Theme))
                        {
                            if (user.Theme == "Dark")
                                ThemeState = true;
                            if (ThemeState)
                            {
                                DrawerColor = Color.Warning;
                                AppBarColor = Color.Surface;
                            }
                            else
                            {
                                DrawerColor = Color.Dark;
                                AppBarColor = Color.Tertiary;
                            }


                        }
                        else
                        {
                            ThemeState = false;
                            if (ThemeState)
                            {
                                DrawerColor = Color.Warning;
                                AppBarColor = Color.Surface;
                            }
                            else
                            {
                                DrawerColor = Color.Dark;
                                AppBarColor = Color.Tertiary;
                            }


                        }

                    }


                }
            }
        }
        hospitalInformation = await mediator.Send(new GetHospitalInformationByIdQuery(1));

        if (hospitalInformation != null)
        {

        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public async void OnThemeToggledChanged(bool toggled)
    {
        var user = await mediator.Send(new GetUserByUsernameQuery(userInfo?.Username));

        ThemeState = toggled;

        if (ThemeState)
        {
            DrawerColor = Color.Warning;
            AppBarColor = Color.Surface;
            user.Theme = "Dark";
        }
        else
        {
            DrawerColor = Color.Dark;
            AppBarColor = Color.Tertiary;
            user.Theme = "Light";
        }

        var command = MapperConfig.Mapper.Map<EditUserCommand>(user);

        await mediator.Send(command);
    }
}
